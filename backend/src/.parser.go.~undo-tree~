(undo-tree-save-format-version . 1)
"2e53253fc895db71933e2ddd4e8cab5746673a74"
[nil nil nil nil (25217 8831 455193 889000) 0 nil]
([nil nil ((871 . 872) (#("#" 0 1 (fontified t face font-lock-string-face)) . 871) (871 . 872) (#(">" 0 1 (fontified t face font-lock-string-face)) . 871) (t 25217 5881 666703 168000)) nil (25217 8831 455192 773000) 0 nil])
([nil nil ((957 . 958) (#(">" 0 1 (fontified t face font-lock-string-face)) . 957)) nil (25217 8831 455840 185000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -109) (undo-tree-id32 . -1) (109 . 110) (104 . 109) (#("t" 0 1 (fontified t face font-lock-string-face)) . -104) (undo-tree-id33 . -1) (undo-tree-id34 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -105) (undo-tree-id35 . -1) (undo-tree-id36 . -1) (#("t" 0 1 (fontified t face font-lock-string-face)) . -106) (undo-tree-id37 . -1) (undo-tree-id38 . -1) (#("l" 0 1 (fontified t face font-lock-string-face)) . -107) (undo-tree-id39 . -1) (undo-tree-id40 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -108) (undo-tree-id41 . -1) (undo-tree-id42 . -1) 109 (87 . 89) (#("[" 0 1 (fontified nil)) . -87) (87 . 88) (81 . 86) (#("T" 0 1 (fontified t)) . -81) (undo-tree-id43 . -1) (undo-tree-id44 . -1) (undo-tree-id45 . -1) (#("i" 0 1 (fontified t)) . -82) (undo-tree-id46 . -1) (undo-tree-id47 . -1) (undo-tree-id48 . -1) (#("t" 0 1 (fontified t)) . -83) (undo-tree-id49 . -1) (undo-tree-id50 . -1) (undo-tree-id51 . -1) (#("l" 0 1 (fontified t)) . -84) (undo-tree-id52 . -1) (undo-tree-id53 . -1) (undo-tree-id54 . -1) (#("e" 0 1 (fontified t)) . -85) (undo-tree-id55 . -1) (undo-tree-id56 . -1) (undo-tree-id57 . -1) 86) nil (25217 8842 230575 428000) 0 nil] [nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -104) (undo-tree-id0 . -1) (104 . 105) (#("l" 0 1 (fontified t face font-lock-string-face)) . -104) (undo-tree-id1 . -1) (undo-tree-id2 . -1) (#("
" 0 1 (fontified nil face font-lock-string-face)) . -105) (undo-tree-id3 . 1) (undo-tree-id4 . -1) (undo-tree-id5 . -1) 106 (77 . 78) (#("    " 0 4 (fontified nil)) . -77) (undo-tree-id6 . -4) (undo-tree-id7 . -4) (108 . 109) (#("e" 0 1 (fontified t face font-lock-string-face)) . -108) (undo-tree-id8 . -1) (undo-tree-id9 . -1) 109 (#("]" 0 1 (fontified nil)) . 89) (undo-tree-id10 . -1) (88 . 89) (87 . 89) (#("[" 0 1 (fontified nil)) . -87) (87 . 88) (81 . 86) (#("l" 0 1 (fontified t)) . -81) (undo-tree-id11 . -1) (#("i" 0 1 (fontified t)) . -82) (undo-tree-id12 . -1) (#("n" 0 1 (fontified t)) . -83) (undo-tree-id13 . -1) 84 (81 . 84) (#("L" 0 1 (fontified t)) . -81) (undo-tree-id14 . -1) 82 (81 . 82) (#("l" 0 1 (fontified t)) . -81) (undo-tree-id15 . -1) 82 (81 . 82) (#("T" 0 1 (fontified t)) . -81) (undo-tree-id16 . -1) (undo-tree-id17 . -1) (undo-tree-id18 . -1) (#("i" 0 1 (fontified t)) . -82) (undo-tree-id19 . -1) (undo-tree-id20 . -1) (undo-tree-id21 . -1) (#("t" 0 1 (fontified t)) . -83) (undo-tree-id22 . -1) (undo-tree-id23 . -1) (undo-tree-id24 . -1) (#("l" 0 1 (fontified t)) . -84) (undo-tree-id25 . -1) (undo-tree-id26 . -1) (undo-tree-id27 . -1) (#("e" 0 1 (fontified t)) . -85) (undo-tree-id28 . -1) (undo-tree-id29 . -1) (undo-tree-id30 . -1) 86) ((81 . 86) (#("l" 0 1 (fontified nil)) . 81) (81 . 82) (#("L" 0 1 (fontified nil)) . 81) (81 . 82) (#("lin" 0 1 (fontified nil) 1 2 (fontified nil) 2 3 (fontified nil)) . 81) (81 . 84) (#("Lines" 0 5 (fontified nil)) . 81) (#("[" 0 1 (fontified nil)) . 87) (87 . 88) (#("[]" 0 1 (fontified nil) 1 2 (fontified nil)) . 87) (#("]" 0 1 (fontified nil)) . 88) (89 . 90) (108 . 109) (#("
" 0 1 (fontified nil face font-lock-string-face)) . 108) (undo-tree-id31 . 1) (77 . 81) (#("	" 0 1 (fontified nil)) . 77) (104 . 106) (#("j" 0 1 (fontified nil face font-lock-string-face)) . 104) (104 . 105)) (25217 8831 455186 970000) 0 nil])
([nil nil ((#("    Body string  `json:\"body\"`
" 0 9 (fontified t) 9 15 (fontified t face font-lock-type-face) 15 17 (fontified t) 17 30 (fontified t face font-lock-string-face) 30 31 (fontified t)) . 112) (undo-tree-id61 . -29) (undo-tree-id62 . -29) 141 (t 25217 8842 241887 257000)) nil (25217 8844 957895 228000) 0 nil])
nil
([nil nil ((#("    ImgName string  `json:\"imgname\"`
" 0 12 (fontified t) 12 18 (fontified t face font-lock-type-face) 18 20 (fontified t) 20 36 (fontified t face font-lock-string-face) 36 37 (fontified t)) . 112) (undo-tree-id58 . -29) (undo-tree-id59 . -36) (undo-tree-id60 . -29) 141) nil (25217 8855 398333 713000) 0 nil])
([nil nil ((#("j" 0 1 (fontified nil)) . 666) (661 . 667) (#("Title: \"\", Body: \"\"" 0 1 (fontified t face font-lock-constant-face) 1 2 (fontified t face font-lock-constant-face) 2 3 (fontified t face font-lock-constant-face) 3 4 (fontified t face font-lock-constant-face) 4 5 (fontified t face font-lock-constant-face) 5 6 (fontified t) 6 7 (fontified t) 7 8 (fontified t face font-lock-string-face) 8 9 (fontified t face font-lock-string-face) 9 10 (fontified t) 10 11 (fontified t) 11 12 (fontified t face font-lock-constant-face) 12 13 (fontified t face font-lock-constant-face) 13 14 (fontified t face font-lock-constant-face) 14 15 (fontified t face font-lock-constant-face) 15 16 (fontified t) 16 17 (fontified t) 17 18 (fontified t face font-lock-string-face) 18 19 (fontified t face font-lock-string-face)) . 661) (undo-tree-id135 . -19) (undo-tree-id136 . -19) (undo-tree-id137 . -5) (undo-tree-id138 . -11) (undo-tree-id139 . -15) (undo-tree-id140 . -19) (t 25217 8844 969894 87000)) ((661 . 680) (#("Lines" 0 5 (fontified nil)) . 661) (undo-tree-id133 . -4) (undo-tree-id134 . -4) (#("j" 0 1 (fontified nil)) . 666) (666 . 667)) (25217 8857 533613 910000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -716) (undo-tree-id172 . -1) (716 . 717) (668 . 670) (#("{" 0 1 (fontified nil)) . -668) (666 . 669) (#("[" 0 1 (fontified t)) . -666) (undo-tree-id173 . -1) (#("]" 0 1 (fontified t)) . -667) (undo-tree-id174 . -1) (undo-tree-id175 . 1) (undo-tree-id176 . -1) 668 (#("]" 0 1 (fontified nil)) . 668) (667 . 668) (666 . 668) (#("[" 0 1 (fontified nil)) . -666) (666 . 667)) nil (25217 9018 252901 420000) 0 nil])
([nil nil ((#("strings.ReplaceAll(scanner.Text(), \"*\", \"\") + \"\\n\"
" 0 8 (fontified t) 8 18 (fontified t face font-lock-function-name-face) 18 27 (fontified t) 27 31 (fontified t face font-lock-function-name-face) 31 35 (fontified t) 35 38 (fontified t face font-lock-string-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-string-face) 42 46 (fontified t) 46 47 (fontified t face font-lock-string-face) 47 48 (fontified t syntax-table (9) face font-lock-string-face) 48 50 (fontified t face font-lock-string-face) 50 51 (fontified t)) . 716) (undo-tree-id167 . -50) (undo-tree-id168 . 51) (undo-tree-id169 . -50) (undo-tree-id170 . -50) (undo-tree-id171 . -50) 766) nil (25217 9018 252897 233000) 0 nil])
([nil nil ((nil rear-nonsticky nil 719 . 720) (nil fontified nil 669 . 720) (669 . 720) 668) nil (25217 9018 252893 978000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -736) (undo-tree-id165 . -1) (736 . 737) (734 . 736) (#("
" 0 1 (fontified t rear-nonsticky t)) . -719) (undo-tree-id166 . -1) 720) nil (25217 9018 252893 78000) 0 nil])
([nil nil ((#("			returnPoddsts[len(returnPosts)-1].Title = 		} else if firstSymbol == \"@\" {
" 0 13 (fontified t) 13 17 (fontified t) 17 20 (fontified t face font-lock-builtin-face) 20 45 (fontified t) 45 49 (fontified t) 49 53 (fontified t face font-lock-keyword-face) 53 54 (fontified t) 54 56 (fontified t face font-lock-keyword-face) 56 72 (fontified t) 72 73 (fontified t face font-lock-string-face) 73 74 (fontified t face font-lock-string-face) 74 75 (fontified t face font-lock-string-face) 75 78 (fontified t)) . 723) (undo-tree-id158 . 65) (undo-tree-id159 . -12) (undo-tree-id160 . -45) (undo-tree-id161 . 33) (undo-tree-id162 . -45) (undo-tree-id163 . -45) (undo-tree-id164 . -45) 735) nil (25217 9018 252890 884000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -763) (undo-tree-id150 . -1) (763 . 764) (758 . 763) (#("I" 0 1 (fontified t)) . -758) (undo-tree-id151 . -1) (#("m" 0 1 (fontified t)) . -759) (undo-tree-id152 . -1) (#("g" 0 1 (fontified t)) . -760) (undo-tree-id153 . -1) (#("N" 0 1 (fontified t)) . -761) (undo-tree-id154 . -1) (#("a" 0 1 (fontified t)) . -762) (undo-tree-id155 . -1) (#("m" 0 1 (fontified t)) . -763) (undo-tree-id156 . -1) (#("e" 0 1 (fontified t)) . -764) (undo-tree-id157 . -1) 765) nil (25217 9018 252885 934000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -823) (undo-tree-id141 . -1) (823 . 824) (822 . 823) (770 . 772) (#(" " 0 1 (fontified t)) . -770) (undo-tree-id142 . 1) (undo-tree-id143 . -1) (undo-tree-id144 . 1) (#("=" 0 1 (fontified t)) . -771) (undo-tree-id145 . -1) (#(" " 0 1 (fontified t)) . -772) (undo-tree-id146 . -1) 773 (#(")" 0 1 (fontified t)) . -733) (undo-tree-id147 . -1) (undo-tree-id148 . 1) (undo-tree-id149 . -1) 734 (732 . 734) (#("(" 0 1 (fontified nil)) . -732) (726 . 733)) nil (25217 9018 252877 623000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -823) (undo-tree-id177 . -1) (823 . 824) (#(")" 0 1 (fontified t)) . -823) (undo-tree-id178 . 1) (undo-tree-id179 . -1) (undo-tree-id180 . -1) (#("j" 0 1 (fontified t)) . -824) (undo-tree-id181 . -1) 825 (824 . 825) (823 . 824) (t 25217 9018 254344 943000)) nil (25217 9030 708369 630000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -823) (undo-tree-id196 . -1) (823 . 824) (#(")" 0 1 (fontified t)) . -823) (undo-tree-id197 . -1) (undo-tree-id198 . 1) (undo-tree-id199 . -1) (#(")" 0 1 (fontified t)) . -824) (undo-tree-id200 . -1) (undo-tree-id201 . 1) (undo-tree-id202 . -1) 825 (823 . 825) (t 25217 9030 710387 258000) (#(")" 0 1 (fontified nil)) . 823) (822 . 823) (#(" " 0 1 (fontified nil)) . -822) (822 . 823) (#(")" 0 1 (fontified nil face font-lock-string-face)) . -822) (822 . 823) (t 25217 9030 710387 258000)) nil (25217 9089 794381 857000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -850) (undo-tree-id182 . -1) (850 . 851) (#("}" 0 1 (fontified t)) . -748) (undo-tree-id183 . -1) (undo-tree-id184 . 1) (undo-tree-id185 . -1) (undo-tree-id186 . -1) (undo-tree-id187 . -1) 749 (747 . 749) (#("{" 0 1 (fontified nil)) . -747) (undo-tree-id188 . -1) (undo-tree-id189 . -1) (747 . 748) (746 . 747) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 746) (745 . 746) (#(" " 0 1 (fontified nil)) . -745) (745 . 746) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . -745) (744 . 746) (#("£" 0 1 (fontified t face font-lock-string-face)) . -744) (undo-tree-id190 . -1) 745 (744 . 745) (#("2" 0 1 (fontified t face font-lock-string-face)) . -744) (undo-tree-id191 . -1) 745 (744 . 745) (#("£" 0 1 (fontified t face font-lock-string-face)) . -744) (undo-tree-id192 . -1) (#("@" 0 1 (fontified t face font-lock-string-face)) . -745) (undo-tree-id193 . -1) 746 (744 . 746) (#("$" 0 1 (fontified t face font-lock-string-face)) . -744) (undo-tree-id194 . -1) 745 (744 . 745) (743 . 745) (#("\"" 0 1 (fontified nil)) . -743) (725 . 744) (#("	" 0 1 (fontified t)) . -725) (undo-tree-id195 . -1) 726 (722 . 726)) nil (25217 9089 794253 875000) 0 nil])
([nil nil ((nil rear-nonsticky nil 967 . 968) (#("
" 0 1 (fontified nil)) . -1065) (964 . 1066) 862 (t 25217 9089 890585 473000)) nil (25217 9114 629302 467000) 0 nil])
([nil nil ((#("			returnPosts[len(returnPosts)-1].Body = returnPosts[len(returnPosts)-1].Body + scanner.Text() + \"\\n\"
" 0 15 (fontified t) 15 18 (fontified t face font-lock-builtin-face) 18 54 (fontified t) 54 57 (fontified t face font-lock-builtin-face) 57 89 (fontified t) 89 93 (fontified t face font-lock-function-name-face) 93 98 (fontified t) 98 99 (fontified t face font-lock-string-face) 99 100 (fontified t syntax-table (9) face font-lock-string-face) 100 102 (fontified t face font-lock-string-face) 102 103 (fontified t)) . 862) (undo-tree-id260 . -103) (undo-tree-id261 . -3) (undo-tree-id262 . -3) 865) nil (25217 9114 629300 754000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -925) (undo-tree-id203 . -1) (925 . 926) (#(")" 0 1 (fontified nil)) . 925) (undo-tree-id204 . -1) (924 . 925) (923 . 925) (#("(" 0 1 (fontified nil)) . -923) (undo-tree-id205 . -1) (undo-tree-id206 . -1) (919 . 924) (#("t" 0 1 (fontified t)) . -919) (undo-tree-id207 . -1) (undo-tree-id208 . -1) (#("T" 0 1 (fontified t)) . -920) (undo-tree-id209 . -1) 921 (920 . 921) (#("e" 0 1 (fontified t)) . -920) (undo-tree-id210 . -1) (#("x" 0 1 (fontified t)) . -921) (undo-tree-id211 . -1) (#("t" 0 1 (fontified t)) . -922) (undo-tree-id212 . -1) (#("(" 0 1 (fontified t)) . -923) (undo-tree-id213 . -1) (#(")" 0 1 (fontified t)) . -924) (undo-tree-id214 . -1) (undo-tree-id215 . 1) (undo-tree-id216 . -1) 925 (#(")" 0 1 (fontified nil)) . 925) (924 . 925) (923 . 925) (#("(" 0 1 (fontified nil)) . -923) (919 . 924) (911 . 919) (#("s" 0 1 (fontified t)) . -911) (undo-tree-id217 . -1) 912 (#("t" 0 1 (fontified t)) . -912) (undo-tree-id218 . -1) (#("r" 0 1 (fontified t)) . -913) (undo-tree-id219 . -1) (#("i" 0 1 (fontified t)) . -914) (undo-tree-id220 . -1) (#("n" 0 1 (fontified t)) . -915) (undo-tree-id221 . -1) (#("g" 0 1 (fontified t)) . -916) (undo-tree-id222 . -1) (#("s" 0 1 (fontified t)) . -917) (undo-tree-id223 . -1) (#("." 0 1 (fontified t)) . -918) (undo-tree-id224 . -1) (#("R" 0 1 (fontified t)) . -919) (undo-tree-id225 . -1) (#("e" 0 1 (fontified t)) . -920) (undo-tree-id226 . -1) (#("p" 0 1 (fontified t)) . -921) (undo-tree-id227 . -1) (#("l" 0 1 (fontified t)) . -922) (undo-tree-id228 . -1) (#("a" 0 1 (fontified t)) . -923) (undo-tree-id229 . -1) (#("c" 0 1 (fontified t)) . -924) (undo-tree-id230 . -1) (#("e" 0 1 (fontified t)) . -925) (undo-tree-id231 . -1) (#("A" 0 1 (fontified t)) . -926) (undo-tree-id232 . -1) (#("l" 0 1 (fontified t)) . -927) (undo-tree-id233 . -1) (#("l" 0 1 (fontified t)) . -928) (undo-tree-id234 . -1) (#("(" 0 1 (fontified t)) . -929) (undo-tree-id235 . -1) (#("s" 0 1 (fontified t)) . -930) (undo-tree-id236 . -1) (#("c" 0 1 (fontified t)) . -931) (undo-tree-id237 . -1) (#("a" 0 1 (fontified t)) . -932) (undo-tree-id238 . -1) 933 (#("n" 0 1 (fontified t)) . -933) (undo-tree-id239 . -1) (#("n" 0 1 (fontified t)) . -934) (undo-tree-id240 . -1) (#("e" 0 1 (fontified t)) . -935) (undo-tree-id241 . -1) (#("r" 0 1 (fontified t)) . -936) (undo-tree-id242 . -1) (#("." 0 1 (fontified t)) . -937) (undo-tree-id243 . -1) (#("T" 0 1 (fontified t)) . -938) (undo-tree-id244 . -1) (#("e" 0 1 (fontified t)) . -939) (undo-tree-id245 . -1) (#("x" 0 1 (fontified t)) . -940) (undo-tree-id246 . -1) (#("t" 0 1 (fontified t)) . -941) (undo-tree-id247 . -1) (#("(" 0 1 (fontified t)) . -942) (undo-tree-id248 . -1) (#(")" 0 1 (fontified t)) . -943) (undo-tree-id249 . -1) (#("," 0 1 (fontified t)) . -944) (undo-tree-id250 . -1) (#(" " 0 1 (fontified t)) . -945) (undo-tree-id251 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -946) (undo-tree-id252 . -1) (#("@" 0 1 (fontified nil face font-lock-string-face)) . -947) (undo-tree-id253 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -948) (undo-tree-id254 . -1) (#("," 0 1 (fontified t)) . -949) (undo-tree-id255 . -1) (#(" " 0 1 (fontified t)) . -950) (undo-tree-id256 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -951) (undo-tree-id257 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -952) (undo-tree-id258 . -1) (#(")" 0 1 (fontified t)) . -953) (undo-tree-id259 . -1) 954) nil (25217 9114 629286 805000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -967) (undo-tree-id263 . -1) (967 . 968) (966 . 967) (t 25217 9114 634666 996000)) nil (25217 9165 285599 420000) 0 nil])
([nil nil ((#("}
" 0 1 (fontified t) 1 2 (fontified t)) . 966) (undo-tree-id265 . -2) (undo-tree-id266 . 1) (undo-tree-id267 . 2) (undo-tree-id268 . -1) (t 25217 9165 294831 598000)) nil (25217 9186 148150 811000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -725) (undo-tree-id264 . -1) (725 . 726) (725 . 727) (725 . 730)) nil (25217 9186 148144 782000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -701) (undo-tree-id269 . -1) (701 . 702) (700 . 701) (#("}" 0 1 (fontified t)) . -700) (undo-tree-id270 . -1) (undo-tree-id271 . -1) (undo-tree-id272 . -1) (undo-tree-id273 . 1) (undo-tree-id274 . -1) (undo-tree-id275 . -1) (undo-tree-id276 . -1) (undo-tree-id277 . -1) (undo-tree-id278 . -1) (#(")" 0 1 (fontified t)) . -701) (undo-tree-id279 . -1) (undo-tree-id280 . -1) (undo-tree-id281 . 1) (undo-tree-id282 . -1) (undo-tree-id283 . -1) (undo-tree-id284 . -1) 702 (#("a" 0 1 (fontified t face font-lock-type-face)) . -636) (undo-tree-id285 . -1) (undo-tree-id286 . -1) (undo-tree-id287 . -1) (undo-tree-id288 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -637) (undo-tree-id289 . -1) (undo-tree-id290 . -1) (undo-tree-id291 . -1) (undo-tree-id292 . -1) (#("p" 0 1 (fontified t face font-lock-type-face)) . -638) (undo-tree-id293 . -1) (undo-tree-id294 . -1) (undo-tree-id295 . -1) (undo-tree-id296 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -639) (undo-tree-id297 . -1) (undo-tree-id298 . -1) (undo-tree-id299 . -1) (undo-tree-id300 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -640) (undo-tree-id301 . -1) (undo-tree-id302 . -1) (undo-tree-id303 . -1) (undo-tree-id304 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -641) (undo-tree-id305 . -1) (undo-tree-id306 . -1) (undo-tree-id307 . -1) (undo-tree-id308 . -1) (#("(" 0 1 (fontified t)) . -642) (undo-tree-id309 . -1) (undo-tree-id310 . -1) (undo-tree-id311 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -643) (undo-tree-id312 . -1) (undo-tree-id313 . -1) (undo-tree-id314 . -1) (#("e" 0 1 (fontified t face font-lock-type-face)) . -644) (undo-tree-id315 . -1) (undo-tree-id316 . -1) (undo-tree-id317 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -645) (undo-tree-id318 . -1) (undo-tree-id319 . -1) (undo-tree-id320 . -1) (#("u" 0 1 (fontified t face font-lock-type-face)) . -646) (undo-tree-id321 . -1) (undo-tree-id322 . -1) (undo-tree-id323 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -647) (undo-tree-id324 . -1) (undo-tree-id325 . -1) (undo-tree-id326 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -648) (undo-tree-id327 . -1) (undo-tree-id328 . -1) (undo-tree-id329 . -1) (#("P" 0 1 (fontified t face font-lock-type-face)) . -649) (undo-tree-id330 . -1) (undo-tree-id331 . -1) (undo-tree-id332 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -650) (undo-tree-id333 . -1) (undo-tree-id334 . -1) (undo-tree-id335 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -651) (undo-tree-id336 . -1) (undo-tree-id337 . -1) (undo-tree-id338 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -652) (undo-tree-id339 . -1) (undo-tree-id340 . -1) (undo-tree-id341 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -653) (undo-tree-id342 . -1) (undo-tree-id343 . -1) (undo-tree-id344 . -1) (#("," 0 1 (fontified t)) . -654) (undo-tree-id345 . -1) (undo-tree-id346 . -1) (undo-tree-id347 . -1) (#(" " 0 1 (fontified t)) . -655) (undo-tree-id348 . -1) 656 (t 25217 9186 154898 533000)) nil (25217 9283 502522 119000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -645) (undo-tree-id349 . -1) (645 . 646) (642 . 645) (641 . 643) (#("[" 0 1 (fontified nil)) . -641) (641 . 642) (t 25217 9283 507205 212000)) nil (25217 9309 558158 64000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -718) (undo-tree-id368 . -1) (718 . 719) (644 . 647) (#("			" 0 3 (fontified nil)) . 643) (undo-tree-id369 . -3) (646 . 647) (#("	" 0 1 (fontified t)) . -646) (undo-tree-id370 . -1) 647 (641 . 642) (641 . 646) (#("[" 0 1 (fontified t)) . -641) (undo-tree-id371 . -1) (undo-tree-id372 . -1) (undo-tree-id373 . -1) (undo-tree-id374 . -1) (#("." 0 1 (fontified t)) . -642) (undo-tree-id375 . -1) (undo-tree-id376 . -1) (undo-tree-id377 . -1) (#("." 0 1 (fontified t)) . -643) (undo-tree-id378 . -1) (undo-tree-id379 . -1) (undo-tree-id380 . -1) (#("." 0 1 (fontified t)) . -644) (undo-tree-id381 . -1) (undo-tree-id382 . -1) (undo-tree-id383 . -1) (undo-tree-id384 . -1) (#("]" 0 1 (fontified t)) . -645) (undo-tree-id385 . 1) (undo-tree-id386 . -1) (undo-tree-id387 . 1) (undo-tree-id388 . -1) 646 (t 25217 9309 571285 829000)) nil (25217 9357 913651 717000) 0 nil])
([nil nil ((nil rear-nonsticky nil 710 . 711) (#("
" 0 1 (fontified nil)) . -808) (707 . 809) 647) nil (25217 9357 913638 48000) 0 nil])
([nil nil ((#("			Lines: {strings.ReplaceAll(scanner.Text(), \"*\", \"\") + \"\\n\"}}
" 0 3 (fontified t) 3 8 (fontified t face font-lock-constant-face) 8 10 (fontified t) 10 11 (fontified t) 11 19 (fontified t) 19 29 (fontified t face font-lock-function-name-face) 29 38 (fontified t) 38 42 (fontified t face font-lock-function-name-face) 42 46 (fontified t) 46 49 (fontified t face font-lock-string-face) 49 51 (fontified t) 51 53 (fontified t face font-lock-string-face) 53 57 (fontified t) 57 58 (fontified t face font-lock-string-face) 58 59 (fontified t syntax-table (9) face font-lock-string-face) 59 61 (fontified t face font-lock-string-face) 61 63 (fontified t) 63 64 (fontified t)) . 644) (undo-tree-id359 . -64) (undo-tree-id360 . -11) (undo-tree-id361 . -62) (undo-tree-id362 . -62) (undo-tree-id363 . -61) (undo-tree-id364 . -61) (undo-tree-id365 . -10) (undo-tree-id366 . -10) (undo-tree-id367 . -3) 647) nil (25217 9357 913637 105000) 0 nil])
([nil nil ((729 . 730) (#("@" 0 1 (fontified t face font-lock-string-face)) . 729)) nil (25217 9357 913630 925000) 0 nil])
([nil nil ((#("
" 0 1 (fontified t)) . 643) (undo-tree-id350 . -1) (undo-tree-id351 . -1) (undo-tree-id352 . -1) (undo-tree-id353 . -1) (undo-tree-id354 . -1) (undo-tree-id355 . -1) (undo-tree-id356 . -1) (undo-tree-id357 . -1) (undo-tree-id358 . -1)) nil (25217 9357 913627 677000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -646) (undo-tree-id425 . -1) (646 . 647) (642 . 646) (t 25217 9357 919433 922000) 637) nil (25217 9465 647143 59000) 0 nil])
([nil nil ((nil rear-nonsticky nil 708 . 709) (nil fontified nil 646 . 709) (646 . 709) 645) nil (25217 9465 647141 714000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -646) (undo-tree-id421 . -1) (646 . 647) (#("	" 0 1 (fontified t)) . -646) (undo-tree-id422 . -1) (#("	" 0 1 (fontified t)) . -647) (undo-tree-id423 . -1) (#("	" 0 1 (fontified t)) . -648) (undo-tree-id424 . -1) 649) nil (25217 9465 647140 679000) 0 nil])
([nil nil ((#("			returnPosts = post{}
" 0 17 (fontified t) 17 21 (fontified t face font-lock-type-face) 21 23 (fontified t) 23 24 (fontified t)) . 619) (undo-tree-id414 . -17) (undo-tree-id415 . -17) (undo-tree-id416 . -21) (undo-tree-id417 . -21) (undo-tree-id418 . -3) (undo-tree-id419 . -18) (undo-tree-id420 . -18) 622) nil (25217 9465 647137 285000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -668) (undo-tree-id389 . -1) (668 . 669) (667 . 669) (#("{" 0 1 (fontified nil)) . -667) (undo-tree-id390 . -1) (undo-tree-id391 . -1) (667 . 668) (661 . 667) (#("[" 0 1 (fontified nil)) . -661) (undo-tree-id392 . -1) (undo-tree-id393 . -1) (#("]" 0 1 (fontified t)) . 662) (undo-tree-id394 . -1) (661 . 663) (#("[" 0 1 (fontified nil)) . -661) (661 . 662) (#("T" 0 1 (fontified t)) . -661) (undo-tree-id395 . -1) (#("i" 0 1 (fontified t)) . -662) (undo-tree-id396 . -1) (#("t" 0 1 (fontified t)) . -663) (undo-tree-id397 . -1) (#("l" 0 1 (fontified t)) . -664) (undo-tree-id398 . -1) (#("e" 0 1 (fontified t)) . -665) (undo-tree-id399 . -1) (#(":" 0 1 (fontified t)) . -666) (undo-tree-id400 . -1) (#(" " 0 1 (fontified t)) . -667) (undo-tree-id401 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -668) (undo-tree-id402 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -669) (undo-tree-id403 . -1) (#("," 0 1 (fontified t)) . -670) (undo-tree-id404 . -1) (#(" " 0 1 (fontified t)) . -671) (undo-tree-id405 . -1) (#("B" 0 1 (fontified t)) . -672) (undo-tree-id406 . -1) (#("o" 0 1 (fontified t)) . -673) (undo-tree-id407 . -1) (#("d" 0 1 (fontified t)) . -674) (undo-tree-id408 . -1) (#("y" 0 1 (fontified t)) . -675) (undo-tree-id409 . -1) (#(":" 0 1 (fontified t)) . -676) (undo-tree-id410 . -1) (#(" " 0 1 (fontified t)) . -677) (undo-tree-id411 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -678) (undo-tree-id412 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -679) (undo-tree-id413 . -1) 680) nil (25217 9465 647128 294000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-function-name-face)) . -964) (undo-tree-id426 . -1) (964 . 965) (950 . 964) (823 . 837) (679 . 689) (675 . 679) (t 25217 9465 659757 886000)) nil (25217 9484 370100 426000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -674) (undo-tree-id427 . -1) (674 . 675) (#("
" 0 1 (fontified t)) . -674) (undo-tree-id428 . -1) (undo-tree-id429 . -1) (#("	" 0 1 (fontified t)) . -675) (undo-tree-id430 . -1) (undo-tree-id431 . -1) (#("	" 0 1 (fontified t)) . -676) (undo-tree-id432 . -1) (undo-tree-id433 . -1) (#("	" 0 1 (fontified t)) . -677) (undo-tree-id434 . -1) (undo-tree-id435 . -1) (#("	" 0 1 (fontified t)) . -678) (undo-tree-id436 . -1) (undo-tree-id437 . -1) 679 (674 . 679) (668 . 674) (667 . 669) (#("[" 0 1 (fontified nil)) . -667) (667 . 668) (t 25217 9484 383813 411000)) nil (25217 9520 576810 871000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-type-face)) . -678) (undo-tree-id438 . -1) (678 . 679) (672 . 678) (668 . 671) (#("s" 0 1 (fontified t)) . -668) (undo-tree-id439 . -1) (undo-tree-id440 . -1) (undo-tree-id441 . -1) (#("t" 0 1 (fontified t)) . -669) (undo-tree-id442 . -1) (undo-tree-id443 . -1) (undo-tree-id444 . -1) (#("r" 0 1 (fontified t)) . -670) (undo-tree-id445 . -1) (undo-tree-id446 . -1) (undo-tree-id447 . -1) (#("i" 0 1 (fontified t)) . -671) (undo-tree-id448 . -1) (undo-tree-id449 . -1) (undo-tree-id450 . -1) (#("n" 0 1 (fontified t)) . -672) (undo-tree-id451 . -1) (undo-tree-id452 . -1) (undo-tree-id453 . -1) (#("g" 0 1 (fontified t)) . -673) (undo-tree-id454 . -1) (undo-tree-id455 . -1) (undo-tree-id456 . -1) 674 (t 25217 9520 587920 178000)) nil (25217 9569 846935 482000) 0 nil])
([nil nil ((#("			returnPosts = append(returnPosts, post{Lines:[...]string{}})
" 0 3 (fontified t) 3 17 (fontified t) 17 23 (fontified t face font-lock-builtin-face) 23 37 (fontified t) 37 39 (fontified t face font-lock-type-face) 39 40 (fontified t face font-lock-type-face) 40 41 (fontified t face font-lock-type-face) 41 42 (fontified t) 42 43 (fontified t face font-lock-constant-face) 43 44 (fontified t face font-lock-constant-face) 44 45 (fontified t face font-lock-constant-face) 45 46 (fontified t face font-lock-constant-face) 46 47 (fontified t face font-lock-constant-face) 47 48 (fontified t) 48 49 (fontified t) 49 50 (fontified t) 50 51 (fontified t) 51 52 (fontified t) 52 53 (fontified t) 53 54 (fontified t face font-lock-type-face) 54 55 (fontified t face font-lock-type-face) 55 56 (fontified t face font-lock-type-face) 56 57 (fontified t face font-lock-type-face) 57 58 (fontified t face font-lock-type-face) 58 59 (fontified t face font-lock-type-face) 59 60 (fontified t) 60 61 (fontified t) 61 62 (fontified t) 62 63 (fontified t rear-nonsticky t) 63 64 (fontified t)) . 619) (undo-tree-id629 . -62) (undo-tree-id630 . 5) (undo-tree-id631 . -3) (undo-tree-id632 . -62) (undo-tree-id633 . -64) (undo-tree-id634 . -64) (undo-tree-id635 . -64) (undo-tree-id636 . -64) (undo-tree-id637 . -64) (undo-tree-id638 . -3) (undo-tree-id639 . -49) (undo-tree-id640 . -51) (undo-tree-id641 . -48) (undo-tree-id642 . -49) (undo-tree-id643 . -48) (undo-tree-id644 . -49) (undo-tree-id645 . -41) (undo-tree-id646 . -42) (undo-tree-id647 . -41) (undo-tree-id648 . -42) (undo-tree-id649 . -62) (undo-tree-id650 . -42) (undo-tree-id651 . -47) (undo-tree-id652 . -51) 670 (t 25217 9539 615975 999000)) nil (25217 9779 32687 192000) 0 nil] [nil nil ((#("j" 0 1 (fontified t)) . -660) (undo-tree-id457 . -1) (660 . 661) (658 . 660) (#("s" 0 1 (fontified t)) . -658) (undo-tree-id458 . -1) (undo-tree-id459 . -1) (undo-tree-id460 . -1) (undo-tree-id461 . -1) (undo-tree-id462 . -1) (undo-tree-id463 . -1) (undo-tree-id464 . -1) (undo-tree-id465 . -1) (undo-tree-id466 . -1) (undo-tree-id467 . -1) (undo-tree-id468 . -1) (undo-tree-id469 . -1) (undo-tree-id470 . -1) (undo-tree-id471 . -1) 659 (#("t" 0 1 (fontified t)) . -659) (undo-tree-id472 . -1) (undo-tree-id473 . -1) (undo-tree-id474 . -1) (undo-tree-id475 . -1) (undo-tree-id476 . -1) (undo-tree-id477 . -1) (undo-tree-id478 . -1) (undo-tree-id479 . -1) (undo-tree-id480 . -1) (undo-tree-id481 . -1) (undo-tree-id482 . -1) (undo-tree-id483 . -1) (undo-tree-id484 . -1) (undo-tree-id485 . -1) (#("{" 0 1 (fontified nil)) . -660) (undo-tree-id486 . -1) (undo-tree-id487 . -1) (undo-tree-id488 . -1) (undo-tree-id489 . -1) (undo-tree-id490 . -1) (undo-tree-id491 . -1) (undo-tree-id492 . -1) (undo-tree-id493 . -1) (undo-tree-id494 . -1) (undo-tree-id495 . -1) (undo-tree-id496 . -1) (undo-tree-id497 . -1) (undo-tree-id498 . -1) (undo-tree-id499 . -1) (#("L" 0 1 (fontified t)) . -661) (undo-tree-id500 . -1) (undo-tree-id501 . -1) (undo-tree-id502 . -1) (undo-tree-id503 . -1) (undo-tree-id504 . -1) (undo-tree-id505 . -1) (undo-tree-id506 . -1) (undo-tree-id507 . -1) (undo-tree-id508 . -1) (undo-tree-id509 . -1) (undo-tree-id510 . -1) (#("i" 0 1 (fontified t)) . -662) (undo-tree-id511 . -1) (undo-tree-id512 . -1) (undo-tree-id513 . -1) (undo-tree-id514 . -1) (undo-tree-id515 . -1) (undo-tree-id516 . -1) (undo-tree-id517 . -1) (undo-tree-id518 . -1) (undo-tree-id519 . -1) (undo-tree-id520 . -1) (undo-tree-id521 . -1) (#("n" 0 1 (fontified t)) . -663) (undo-tree-id522 . -1) (undo-tree-id523 . -1) (undo-tree-id524 . -1) (undo-tree-id525 . -1) (undo-tree-id526 . -1) (undo-tree-id527 . -1) (undo-tree-id528 . -1) (undo-tree-id529 . -1) (undo-tree-id530 . -1) (undo-tree-id531 . -1) (undo-tree-id532 . -1) (#("e" 0 1 (fontified t)) . -664) (undo-tree-id533 . -1) (undo-tree-id534 . -1) (undo-tree-id535 . -1) (undo-tree-id536 . -1) (undo-tree-id537 . -1) (undo-tree-id538 . -1) (undo-tree-id539 . -1) (undo-tree-id540 . -1) (undo-tree-id541 . -1) (undo-tree-id542 . -1) (undo-tree-id543 . -1) (#("s" 0 1 (fontified t)) . -665) (undo-tree-id544 . -1) (undo-tree-id545 . -1) (undo-tree-id546 . -1) (undo-tree-id547 . -1) (undo-tree-id548 . -1) (undo-tree-id549 . -1) (undo-tree-id550 . -1) (undo-tree-id551 . -1) (undo-tree-id552 . -1) (undo-tree-id553 . -1) (undo-tree-id554 . -1) (#(":" 0 1 (fontified t)) . -666) (undo-tree-id555 . -1) (undo-tree-id556 . -1) (undo-tree-id557 . -1) (undo-tree-id558 . -1) (undo-tree-id559 . -1) (undo-tree-id560 . -1) (undo-tree-id561 . -1) (undo-tree-id562 . -1) (undo-tree-id563 . -1) (undo-tree-id564 . -1) (#("[" 0 1 (fontified t)) . -667) (undo-tree-id565 . -1) (undo-tree-id566 . -1) (undo-tree-id567 . -1) (undo-tree-id568 . -1) (undo-tree-id569 . -1) (undo-tree-id570 . -1) (undo-tree-id571 . -1) (undo-tree-id572 . -1) (#("." 0 1 (fontified nil)) . -668) (undo-tree-id573 . -1) (undo-tree-id574 . -1) (undo-tree-id575 . -1) (undo-tree-id576 . -1) (undo-tree-id577 . -1) (#("." 0 1 (fontified t)) . -669) (undo-tree-id578 . -1) (undo-tree-id579 . -1) (undo-tree-id580 . -1) (undo-tree-id581 . -1) (undo-tree-id582 . -1) (#("." 0 1 (fontified t)) . -670) (undo-tree-id583 . -1) (undo-tree-id584 . -1) (undo-tree-id585 . -1) (undo-tree-id586 . -1) (undo-tree-id587 . -1) (#("]" 0 1 (fontified t)) . -671) (undo-tree-id588 . -1) (undo-tree-id589 . -1) (undo-tree-id590 . -1) (undo-tree-id591 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -672) (undo-tree-id592 . -1) (undo-tree-id593 . -1) (undo-tree-id594 . -1) (undo-tree-id595 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -673) (undo-tree-id596 . -1) (undo-tree-id597 . -1) (undo-tree-id598 . -1) (undo-tree-id599 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -674) (undo-tree-id600 . -1) (undo-tree-id601 . -1) (undo-tree-id602 . -1) (undo-tree-id603 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -675) (undo-tree-id604 . -1) (undo-tree-id605 . -1) (undo-tree-id606 . -1) (undo-tree-id607 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -676) (undo-tree-id608 . -1) (undo-tree-id609 . -1) (undo-tree-id610 . -1) (undo-tree-id611 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -677) (undo-tree-id612 . -1) (undo-tree-id613 . -1) (undo-tree-id614 . -1) (undo-tree-id615 . -1) (#("{" 0 1 (fontified nil)) . -678) (undo-tree-id616 . -1) (undo-tree-id617 . 1) (undo-tree-id618 . -1) (undo-tree-id619 . -1) (undo-tree-id620 . -1) (#("}" 0 1 (fontified t)) . 679) (undo-tree-id621 . -1) (undo-tree-id622 . -1) (undo-tree-id623 . -1) (#("}" 0 1 (fontified t)) . -679) (undo-tree-id624 . -1) (undo-tree-id625 . 1) (undo-tree-id626 . -1) 680 (t 25217 9539 615975 999000)) ((679 . 680) (658 . 680) (#("kk" 0 2 (fontified nil)) . 658) (undo-tree-id627 . -1) (undo-tree-id628 . -1) (#("j" 0 1 (fontified nil)) . 660) (660 . 661)) (25217 9569 846107 259000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -659) (undo-tree-id656 . -1) (659 . 660) (654 . 659) (#("o" 0 1 (fontified t)) . -654) (undo-tree-id657 . -1) (undo-tree-id658 . -1) (#("i" 0 1 (fontified t)) . -655) (undo-tree-id659 . -1) (undo-tree-id660 . -1) (#("n" 0 1 (fontified t)) . -656) (undo-tree-id661 . -1) (undo-tree-id662 . -1) (#("e" 0 1 (fontified t)) . -657) (undo-tree-id663 . -1) (undo-tree-id664 . -1) (#("s" 0 1 (fontified t)) . -658) (undo-tree-id665 . -1) (undo-tree-id666 . -1) 659 (653 . 659) (#("-" 0 1 (fontified t)) . -653) (undo-tree-id667 . -1) 654 (653 . 654) (649 . 652) (#(" " 0 1 (fontified nil)) . -649) (649 . 650) (#(")" 0 1 (fontified nil)) . -649) (649 . 650) (645 . 649) (#("O" 0 1 (fontified t)) . -645) (undo-tree-id668 . -1) (#("t" 0 1 (fontified t)) . -646) (undo-tree-id669 . -1) (#("s" 0 1 (fontified t)) . -647) (undo-tree-id670 . -1) (#(")" 0 1 (fontified t)) . -648) (undo-tree-id671 . -1) (undo-tree-id672 . 1) (undo-tree-id673 . -1) 649 (#(")" 0 1 (fontified nil)) . 649) (638 . 649) (637 . 639) (#("(" 0 1 (fontified nil)) . -637) (634 . 638) (633 . 635) (#("[" 0 1 (fontified nil)) . -633) (633 . 634) (#("." 0 1 (fontified t)) . -633) (undo-tree-id674 . -1) 634 (633 . 634) (t 25217 9780 328667 951000)) nil (25217 9829 868785 234000) 0 nil] [nil nil ((#("j" 0 1 (fontified t)) . -735) (undo-tree-id653 . -1) (735 . 736) (732 . 735) (#("," 0 1 (fontified t)) . -732) (undo-tree-id654 . -1) (undo-tree-id655 . -1) 733 (732 . 733) (t 25217 9579 488092 364000)) ((#("," 0 1 (fontified nil)) . 732) (732 . 733) (#("..." 0 3 (fontified nil)) . 732) (#("j" 0 1 (fontified nil)) . 735) (735 . 736) (t 25217 9769 548637 450000)) (25217 9769 535227 373000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified nil)) . -1048) (907 . 1049) 832 (t 25217 9829 880807 668000)) nil (25217 9885 181651 146000) 0 nil])
nil
([nil nil ((#("
" 0 1 (fontified nil)) . -1287) (1146 . 1288) 1064) nil (25217 9886 338063 46000) 0 nil])
([nil nil ((#("			returnPosts = append(returnPosts[len(returnPosts)-1].Lines, strings.ReplaceAll(scanner.Text(), \"@\", \"\") + \"\\n\")
" 0 3 (fontified t) 3 17 (fontified t) 17 23 (fontified t face font-lock-builtin-face) 23 24 (fontified t) 24 36 (fontified t) 36 39 (fontified t face font-lock-builtin-face) 39 63 (fontified t) 63 71 (fontified t) 71 81 (fontified t face font-lock-function-name-face) 81 90 (fontified t) 90 94 (fontified t face font-lock-function-name-face) 94 98 (fontified t) 98 99 (fontified t face font-lock-string-face) 99 100 (fontified t face font-lock-string-face) 100 101 (fontified t face font-lock-string-face) 101 103 (fontified t) 103 105 (fontified t face font-lock-string-face) 105 109 (fontified t) 109 110 (fontified t face font-lock-string-face) 110 111 (fontified t syntax-table (9) face font-lock-string-face) 111 113 (fontified t face font-lock-string-face) 113 114 (fontified t) 114 115 (fontified t)) . 793) (undo-tree-id725 . -25) (undo-tree-id726 . 52) (undo-tree-id727 . -60) (undo-tree-id728 . -25) (undo-tree-id729 . -23) (undo-tree-id730 . -113) (undo-tree-id731 . -35) (undo-tree-id732 . -23) (undo-tree-id733 . -23) (undo-tree-id734 . -113) (undo-tree-id735 . -3) 796) nil (25217 9914 251713 26000) 0 nil] [nil nil ((#("			returnPosts = append(returnPosts[len(returnPosts)-1].Lines, scanner.Text() + \"\\n\")
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 17 (fontified t) 17 23 (fontified t face font-lock-builtin-face) 23 24 (fontified t) 24 36 (fontified t) 36 39 (fontified t face font-lock-builtin-face) 39 71 (fontified t) 71 75 (fontified t face font-lock-function-name-face) 75 77 (fontified t) 77 80 (fontified t) 80 81 (fontified t face font-lock-string-face) 81 82 (syntax-table (9) fontified t face font-lock-string-face) 82 83 (fontified t face font-lock-string-face) 83 84 (fontified t face font-lock-string-face) 84 85 (fontified t) 85 86 (fontified t)) . 1061) (undo-tree-id687 . -86) (undo-tree-id688 . -85) (undo-tree-id689 . -84) (undo-tree-id690 . -23) (undo-tree-id691 . -24) (undo-tree-id692 . -23) (undo-tree-id693 . -23) (undo-tree-id694 . -84) (undo-tree-id695 . -84) (undo-tree-id696 . -3) (undo-tree-id697 . -3) 1064) ((1061 . 1147)) (25217 9885 680565 566000) 0 nil])
([nil nil ((#("returnPosts[len(returnPosts)-1].Lines" 0 11 (fontified t) 11 12 (fontified t) 12 15 (fontified t face font-lock-builtin-face) 15 16 (fontified t) 16 27 (fontified t) 27 30 (fontified t) 30 37 (fontified t)) . 1035) (undo-tree-id722 . -36) (undo-tree-id723 . -36) (undo-tree-id724 . -36)) nil (25217 9914 251706 126000) 0 nil])
([nil nil ((#("			returnPosts = append(returnPosts[len(returnPosts)-1].Lines, strings.ReplaceAll(scanner.Text(), \"@\", \"\") + \"\\n\")
" 0 3 (fontified t) 3 17 (fontified t) 17 23 (fontified t face font-lock-builtin-face) 23 24 (fontified t) 24 36 (fontified t) 36 39 (fontified t face font-lock-builtin-face) 39 63 (fontified t) 63 71 (fontified t) 71 81 (fontified t face font-lock-function-name-face) 81 90 (fontified t) 90 94 (fontified t face font-lock-function-name-face) 94 98 (fontified t) 98 99 (fontified t face font-lock-string-face) 99 100 (fontified t face font-lock-string-face) 100 101 (fontified t face font-lock-string-face) 101 103 (fontified t) 103 105 (fontified t face font-lock-string-face) 105 109 (fontified t) 109 110 (fontified t face font-lock-string-face) 110 111 (fontified t syntax-table (9) face font-lock-string-face) 111 113 (fontified t face font-lock-string-face) 113 114 (fontified t) 114 115 (fontified t)) . 793) (undo-tree-id675 . -25) (undo-tree-id676 . 52) (undo-tree-id677 . -60) (undo-tree-id678 . -25) (undo-tree-id679 . -23) (undo-tree-id680 . -113) (undo-tree-id681 . -113) (undo-tree-id682 . -35) (undo-tree-id683 . -23) (undo-tree-id684 . -23) (undo-tree-id685 . -113) (undo-tree-id686 . -3) 796) ((793 . 908)) (25217 9885 181812 954000) 0 nil])
([nil nil ((nil rear-nonsticky nil 986 . 987) (nil fontified nil 950 . 987) (950 . 987) 949) nil (25217 9914 251703 904000) 0 nil])
([nil nil ((918 . 919) (#("*" 0 1 (fontified t face font-lock-string-face)) . 918)) ((918 . 919) (#("@" 0 1 (fontified t face font-lock-string-face)) . 918)) (25217 9885 181624 463000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -1058) (undo-tree-id711 . -1) (1058 . 1059) (#("e" 0 1 (fontified t)) . -987) (undo-tree-id712 . -1) (#("t" 0 1 (fontified t)) . -988) (undo-tree-id713 . -1) (#("u" 0 1 (fontified t)) . -989) (undo-tree-id714 . -1) (#("r" 0 1 (fontified t)) . -990) (undo-tree-id715 . -1) (#("n" 0 1 (fontified t)) . -991) (undo-tree-id716 . -1) (#("P" 0 1 (fontified t)) . -992) (undo-tree-id717 . -1) (#("o" 0 1 (fontified t)) . -993) (undo-tree-id718 . -1) (#("s" 0 1 (fontified t)) . -994) (undo-tree-id719 . -1) (#("t" 0 1 (fontified t)) . -995) (undo-tree-id720 . -1) (#("s" 0 1 (fontified t)) . -996) (undo-tree-id721 . -1) 997) nil (25217 9914 251702 224000) 0 nil])
nil
([nil nil ((#("			 = append(returnPosts[len(returnPosts)-1].Lines, strings.ReplaceAll(scanner.Text(), \"*\", \"\") + \"\\n\")
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 6 (fontified t) 6 12 (fontified t face font-lock-builtin-face) 12 13 (fontified t) 13 25 (fontified t) 25 28 (fontified t face font-lock-builtin-face) 28 52 (fontified t) 52 60 (fontified t) 60 70 (fontified t face font-lock-function-name-face) 70 79 (fontified t) 79 83 (fontified t face font-lock-function-name-face) 83 87 (fontified t) 87 88 (fontified t face font-lock-string-face) 88 89 (fontified t face font-lock-string-face) 89 90 (fontified t face font-lock-string-face) 90 92 (fontified t) 92 94 (fontified t face font-lock-string-face) 94 98 (fontified t) 98 99 (fontified t face font-lock-string-face) 99 100 (syntax-table (9) fontified t face font-lock-string-face) 100 102 (fontified t face font-lock-string-face) 102 103 (fontified t) 103 104 (fontified t)) . 1059) (undo-tree-id698 . -3) (undo-tree-id699 . 101) (undo-tree-id700 . -3) (undo-tree-id701 . -3) (undo-tree-id702 . -102) (undo-tree-id703 . -3) (undo-tree-id704 . 2) (undo-tree-id705 . -103) (undo-tree-id706 . 92) (undo-tree-id707 . -13) (undo-tree-id708 . -4) (undo-tree-id709 . -5) (undo-tree-id710 . -102) 1161) nil (25217 9914 251692 482000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -949) (undo-tree-id736 . -1) (949 . 950) (#("r" 0 1 (fontified t)) . -949) (undo-tree-id737 . -1) (undo-tree-id738 . -1) (undo-tree-id739 . -1) (undo-tree-id740 . -1) (undo-tree-id741 . -1) (undo-tree-id742 . -1) 950 (t 25217 9914 257043 913000)) nil (25217 9922 644152 343000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -489) (undo-tree-id743 . -1) (489 . 490) (#("[" 0 1 (fontified nil)) . -489) (undo-tree-id744 . -1) (undo-tree-id745 . -1) (#("]" 0 1 (fontified t)) . 490) (undo-tree-id746 . -1) (489 . 491) (#("[" 0 1 (fontified nil)) . -489) (489 . 490) (488 . 490) (#("{" 0 1 (fontified nil face font-lock-type-face)) . -488) (482 . 489) (#("]" 0 1 (fontified nil)) . 482) (481 . 482) (480 . 482) (#("[" 0 1 (fontified nil)) . -480) (480 . 481) (#("L" 0 1 (fontified t)) . -480) (undo-tree-id747 . -1) (#("i" 0 1 (fontified t)) . -481) (undo-tree-id748 . -1) (#("n" 0 1 (fontified t)) . -482) (undo-tree-id749 . -1) (#("e" 0 1 (fontified t)) . -483) (undo-tree-id750 . -1) (#("s" 0 1 (fontified t)) . -484) (undo-tree-id751 . -1) 485 (480 . 485) (t 25217 9922 661067 340000)) nil (25217 9983 546082 139000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -491) (undo-tree-id752 . -1) (491 . 492) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 491) (undo-tree-id753 . -1) (490 . 491) (489 . 491) (#("\"" 0 1 (fontified nil)) . -489) (undo-tree-id754 . -1) (undo-tree-id755 . -1) (489 . 490) (t 25217 9983 557236 574000)) nil (25217 10004 109416 682000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -484) (undo-tree-id756 . -1) (484 . 485) (481 . 484) (t 25217 10004 117293 517000)) nil (25217 10052 202902 724000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -487) (undo-tree-id757 . -1) (487 . 488) (480 . 487) (t 25217 10052 209426 392000)) nil (25217 10077 214489 194000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -481) (undo-tree-id1111 . -1) (481 . 482) (480 . 481) (#("L" 0 1 (fontified t)) . -480) (undo-tree-id1112 . -1) (undo-tree-id1113 . -1) (undo-tree-id1114 . -1) (undo-tree-id1115 . -1) 481 (#("i" 0 1 (fontified t)) . -481) (undo-tree-id1116 . -1) (undo-tree-id1117 . -1) (undo-tree-id1118 . -1) (undo-tree-id1119 . -1) (#("n" 0 1 (fontified t)) . -482) (undo-tree-id1120 . -1) (undo-tree-id1121 . -1) (undo-tree-id1122 . -1) (undo-tree-id1123 . -1) (#("e" 0 1 (fontified t)) . -483) (undo-tree-id1124 . -1) (undo-tree-id1125 . -1) (undo-tree-id1126 . -1) (undo-tree-id1127 . -1) (#("s" 0 1 (fontified t)) . -484) (undo-tree-id1128 . -1) (undo-tree-id1129 . -1) (undo-tree-id1130 . -1) (undo-tree-id1131 . -1) (#(":" 0 1 (fontified t)) . -485) (undo-tree-id1132 . -1) (undo-tree-id1133 . -1) (undo-tree-id1134 . -1) (#(" " 0 1 (fontified t)) . -486) (undo-tree-id1135 . -1) (undo-tree-id1136 . -1) (undo-tree-id1137 . -1) (#("[" 0 1 (fontified t)) . -487) (undo-tree-id1138 . -1) (undo-tree-id1139 . 1) (undo-tree-id1140 . -1) (undo-tree-id1141 . -1) (#("." 0 1 (fontified t)) . -488) (undo-tree-id1142 . -1) (undo-tree-id1143 . -1) (undo-tree-id1144 . -1) (#("." 0 1 (fontified t)) . -489) (undo-tree-id1145 . -1) (undo-tree-id1146 . -1) (undo-tree-id1147 . -1) (#("." 0 1 (fontified t)) . -490) (undo-tree-id1148 . -1) (undo-tree-id1149 . -1) (undo-tree-id1150 . -1) (#("]" 0 1 (fontified t)) . -491) (undo-tree-id1151 . -1) (undo-tree-id1152 . -1) (undo-tree-id1153 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -492) (undo-tree-id1154 . -1) (undo-tree-id1155 . -1) (undo-tree-id1156 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -493) (undo-tree-id1157 . -1) (undo-tree-id1158 . -1) (undo-tree-id1159 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -494) (undo-tree-id1160 . -1) (undo-tree-id1161 . -1) (undo-tree-id1162 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -495) (undo-tree-id1163 . -1) (undo-tree-id1164 . -1) (undo-tree-id1165 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -496) (undo-tree-id1166 . -1) (undo-tree-id1167 . -1) (undo-tree-id1168 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -497) (undo-tree-id1169 . -1) (undo-tree-id1170 . -1) (undo-tree-id1171 . -1) (#("{" 0 1 (fontified nil)) . -498) (undo-tree-id1172 . -1) (undo-tree-id1173 . -1) (undo-tree-id1174 . -1) (#("}" 0 1 (fontified t)) . 499) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -499) (undo-tree-id1175 . -1) (undo-tree-id1176 . -1) (undo-tree-id1177 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -500) (undo-tree-id1178 . -1) (undo-tree-id1179 . -1) (undo-tree-id1180 . -1) (#("}" 0 1 (fontified t)) . -501) (undo-tree-id1181 . -1) (undo-tree-id1182 . -1) (undo-tree-id1183 . -1) 502 (t 25217 10077 221495 309000)) nil (25217 10101 471294 128000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -518) (undo-tree-id1214 . -1) (518 . 519) (#("{" 0 1 (fontified nil)) . -518) (undo-tree-id1215 . -1) (#("}" 0 1 (fontified t)) . 519) (518 . 520) (#("{" 0 1 (fontified nil)) . -518) (518 . 519) (505 . 518) (504 . 506) (#("(" 0 1 (fontified nil)) . -504) (498 . 505) (#("r" 0 1 (fontified t)) . -498) (undo-tree-id1216 . -1) (#("e" 0 1 (fontified t)) . -499) (undo-tree-id1217 . -1) (#("t" 0 1 (fontified t)) . -500) (undo-tree-id1218 . -1) (#("u" 0 1 (fontified t)) . -501) (undo-tree-id1219 . -1) (#("r" 0 1 (fontified t)) . -502) (undo-tree-id1220 . -1) (#("n" 0 1 (fontified t face font-lock-keyword-face)) . -503) (undo-tree-id1221 . -1) 504 (491 . 504) (484 . 491) (482 . 484) (t 25217 10102 45563 596000) 480) nil (25217 11076 651931 841000) 0 nil] [nil nil ((#("j" 0 1 (fontified nil)) . 459) (458 . 460) (#("e" 0 1 (fontified nil face font-lock-variable-name-face)) . -458) (undo-tree-id758 . -1) (undo-tree-id759 . -1) (undo-tree-id760 . -1) (undo-tree-id761 . -1) (undo-tree-id762 . -1) (undo-tree-id763 . -1) (undo-tree-id764 . -1) (undo-tree-id765 . -1) (undo-tree-id766 . -1) (undo-tree-id767 . -1) (undo-tree-id768 . -1) (undo-tree-id769 . -1) (undo-tree-id770 . -1) (undo-tree-id771 . -1) (undo-tree-id772 . -1) (undo-tree-id773 . -1) (undo-tree-id774 . -1) (undo-tree-id775 . -1) 459 (#("t" 0 1 (fontified nil face font-lock-variable-name-face)) . -459) (undo-tree-id776 . -1) (undo-tree-id777 . -1) (undo-tree-id778 . -1) (undo-tree-id779 . -1) (undo-tree-id780 . -1) (undo-tree-id781 . -1) (undo-tree-id782 . -1) (undo-tree-id783 . -1) (undo-tree-id784 . -1) (undo-tree-id785 . -1) (undo-tree-id786 . -1) (undo-tree-id787 . -1) (undo-tree-id788 . -1) (undo-tree-id789 . -1) (undo-tree-id790 . -1) (undo-tree-id791 . -1) (undo-tree-id792 . -1) (undo-tree-id793 . -1) (#("u" 0 1 (fontified nil face font-lock-variable-name-face)) . -460) (undo-tree-id794 . -1) (undo-tree-id795 . -1) (undo-tree-id796 . -1) (undo-tree-id797 . -1) (undo-tree-id798 . -1) (undo-tree-id799 . -1) (undo-tree-id800 . -1) (undo-tree-id801 . -1) (undo-tree-id802 . -1) (undo-tree-id803 . -1) (undo-tree-id804 . -1) (undo-tree-id805 . -1) (undo-tree-id806 . -1) (undo-tree-id807 . -1) (undo-tree-id808 . -1) (undo-tree-id809 . -1) (undo-tree-id810 . -1) (undo-tree-id811 . -1) (#("r" 0 1 (fontified nil face font-lock-variable-name-face)) . -461) (undo-tree-id812 . -1) (undo-tree-id813 . -1) (undo-tree-id814 . -1) (undo-tree-id815 . -1) (undo-tree-id816 . -1) (undo-tree-id817 . -1) (undo-tree-id818 . -1) (undo-tree-id819 . -1) (undo-tree-id820 . -1) (undo-tree-id821 . -1) (undo-tree-id822 . -1) (undo-tree-id823 . -1) (undo-tree-id824 . -1) (undo-tree-id825 . -1) (undo-tree-id826 . -1) (undo-tree-id827 . -1) (undo-tree-id828 . -1) (undo-tree-id829 . -1) (#("n" 0 1 (fontified nil face font-lock-variable-name-face)) . -462) (undo-tree-id830 . -1) (undo-tree-id831 . -1) (undo-tree-id832 . -1) (undo-tree-id833 . -1) (undo-tree-id834 . -1) (undo-tree-id835 . -1) (undo-tree-id836 . -1) (undo-tree-id837 . -1) (undo-tree-id838 . -1) (undo-tree-id839 . -1) (undo-tree-id840 . -1) (undo-tree-id841 . -1) (undo-tree-id842 . -1) (undo-tree-id843 . -1) (undo-tree-id844 . -1) (undo-tree-id845 . -1) (undo-tree-id846 . -1) (undo-tree-id847 . -1) (#("P" 0 1 (fontified nil face font-lock-variable-name-face)) . -463) (undo-tree-id848 . -1) (undo-tree-id849 . -1) (undo-tree-id850 . -1) (undo-tree-id851 . -1) (undo-tree-id852 . -1) (undo-tree-id853 . -1) (undo-tree-id854 . -1) (undo-tree-id855 . -1) (undo-tree-id856 . -1) (undo-tree-id857 . -1) (undo-tree-id858 . -1) (undo-tree-id859 . -1) (undo-tree-id860 . -1) (undo-tree-id861 . -1) (undo-tree-id862 . -1) (undo-tree-id863 . -1) (undo-tree-id864 . -1) (undo-tree-id865 . -1) (#("o" 0 1 (fontified nil face font-lock-variable-name-face)) . -464) (undo-tree-id866 . -1) (undo-tree-id867 . -1) (undo-tree-id868 . -1) (undo-tree-id869 . -1) (undo-tree-id870 . -1) (undo-tree-id871 . -1) (undo-tree-id872 . -1) (undo-tree-id873 . -1) (undo-tree-id874 . -1) (undo-tree-id875 . -1) (undo-tree-id876 . -1) (undo-tree-id877 . -1) (undo-tree-id878 . -1) (undo-tree-id879 . -1) (undo-tree-id880 . -1) (undo-tree-id881 . -1) (undo-tree-id882 . -1) (undo-tree-id883 . -1) (#("s" 0 1 (fontified nil face font-lock-variable-name-face)) . -465) (undo-tree-id884 . -1) (undo-tree-id885 . -1) (undo-tree-id886 . -1) (undo-tree-id887 . -1) (undo-tree-id888 . -1) (undo-tree-id889 . -1) (undo-tree-id890 . -1) (undo-tree-id891 . -1) (undo-tree-id892 . -1) (undo-tree-id893 . -1) (undo-tree-id894 . -1) (undo-tree-id895 . -1) (undo-tree-id896 . -1) (undo-tree-id897 . -1) (undo-tree-id898 . -1) (undo-tree-id899 . -1) (undo-tree-id900 . -1) (undo-tree-id901 . -1) (#("t" 0 1 (fontified nil face font-lock-variable-name-face)) . -466) (undo-tree-id902 . -1) (undo-tree-id903 . -1) (undo-tree-id904 . -1) (undo-tree-id905 . -1) (undo-tree-id906 . -1) (undo-tree-id907 . -1) (undo-tree-id908 . -1) (undo-tree-id909 . -1) (undo-tree-id910 . -1) (undo-tree-id911 . -1) (undo-tree-id912 . -1) (undo-tree-id913 . -1) (undo-tree-id914 . -1) (undo-tree-id915 . -1) (undo-tree-id916 . -1) (undo-tree-id917 . -1) (undo-tree-id918 . -1) (undo-tree-id919 . -1) (#("s" 0 1 (fontified nil face font-lock-variable-name-face)) . -467) (undo-tree-id920 . -1) (undo-tree-id921 . -1) (undo-tree-id922 . -1) (undo-tree-id923 . -1) (undo-tree-id924 . -1) (undo-tree-id925 . -1) (undo-tree-id926 . -1) (undo-tree-id927 . -1) (undo-tree-id928 . -1) (undo-tree-id929 . -1) (undo-tree-id930 . -1) (undo-tree-id931 . -1) (undo-tree-id932 . -1) (undo-tree-id933 . -1) (undo-tree-id934 . -1) (undo-tree-id935 . -1) (undo-tree-id936 . -1) (undo-tree-id937 . -1) (#(" " 0 1 (fontified nil)) . -468) (undo-tree-id938 . -1) (undo-tree-id939 . -1) (undo-tree-id940 . -1) (undo-tree-id941 . -1) (undo-tree-id942 . -1) (undo-tree-id943 . -1) (undo-tree-id944 . -1) (undo-tree-id945 . -1) (undo-tree-id946 . -1) (undo-tree-id947 . -1) (undo-tree-id948 . -1) (undo-tree-id949 . -1) (undo-tree-id950 . -1) (undo-tree-id951 . -1) (undo-tree-id952 . -1) (undo-tree-id953 . -1) (undo-tree-id954 . -1) (undo-tree-id955 . -1) (#(":" 0 1 (fontified nil)) . -469) (undo-tree-id956 . -1) (undo-tree-id957 . -1) (undo-tree-id958 . -1) (undo-tree-id959 . -1) (undo-tree-id960 . -1) (undo-tree-id961 . -1) (undo-tree-id962 . -1) (undo-tree-id963 . -1) (undo-tree-id964 . -1) (undo-tree-id965 . -1) (undo-tree-id966 . -1) (undo-tree-id967 . -1) (undo-tree-id968 . -1) (undo-tree-id969 . -1) (undo-tree-id970 . -1) (undo-tree-id971 . -1) (undo-tree-id972 . -1) (undo-tree-id973 . -1) (#("=" 0 1 (fontified nil)) . -470) (undo-tree-id974 . -1) (undo-tree-id975 . -1) (undo-tree-id976 . -1) (undo-tree-id977 . -1) (undo-tree-id978 . -1) (undo-tree-id979 . -1) (undo-tree-id980 . -1) (undo-tree-id981 . -1) (undo-tree-id982 . -1) (undo-tree-id983 . -1) (undo-tree-id984 . -1) (undo-tree-id985 . -1) (undo-tree-id986 . -1) (undo-tree-id987 . -1) (undo-tree-id988 . -1) (undo-tree-id989 . -1) (undo-tree-id990 . -1) (undo-tree-id991 . -1) (#(" " 0 1 (fontified nil)) . -471) (undo-tree-id992 . -1) (undo-tree-id993 . -1) (undo-tree-id994 . -1) (undo-tree-id995 . -1) (undo-tree-id996 . -1) (undo-tree-id997 . -1) (undo-tree-id998 . -1) (undo-tree-id999 . -1) (undo-tree-id1000 . -1) (undo-tree-id1001 . -1) (undo-tree-id1002 . -1) (undo-tree-id1003 . -1) (undo-tree-id1004 . -1) (undo-tree-id1005 . -1) (undo-tree-id1006 . -1) (undo-tree-id1007 . -1) (undo-tree-id1008 . -1) (undo-tree-id1009 . -1) (#("[" 0 1 (fontified nil)) . -472) (undo-tree-id1010 . -1) (undo-tree-id1011 . -1) (undo-tree-id1012 . -1) (undo-tree-id1013 . -1) (undo-tree-id1014 . -1) (undo-tree-id1015 . -1) (undo-tree-id1016 . -1) (undo-tree-id1017 . -1) (undo-tree-id1018 . -1) (undo-tree-id1019 . -1) (undo-tree-id1020 . -1) (undo-tree-id1021 . -1) (undo-tree-id1022 . -1) (undo-tree-id1023 . -1) (undo-tree-id1024 . -1) (undo-tree-id1025 . -1) (#("]" 0 1 (fontified nil)) . -473) (undo-tree-id1026 . -1) (undo-tree-id1027 . -1) (undo-tree-id1028 . -1) (undo-tree-id1029 . -1) (undo-tree-id1030 . -1) (undo-tree-id1031 . -1) (undo-tree-id1032 . -1) (undo-tree-id1033 . -1) (undo-tree-id1034 . -1) (undo-tree-id1035 . -1) (undo-tree-id1036 . -1) (undo-tree-id1037 . -1) (undo-tree-id1038 . -1) (#("p" 0 1 (fontified nil face font-lock-type-face)) . -474) (undo-tree-id1039 . -1) (undo-tree-id1040 . -1) (undo-tree-id1041 . -1) (undo-tree-id1042 . -1) (undo-tree-id1043 . -1) (undo-tree-id1044 . -1) (undo-tree-id1045 . -1) (undo-tree-id1046 . -1) (undo-tree-id1047 . -1) (undo-tree-id1048 . -1) (undo-tree-id1049 . -1) (undo-tree-id1050 . -1) (#("o" 0 1 (fontified nil face font-lock-type-face)) . -475) (undo-tree-id1051 . -1) (undo-tree-id1052 . -1) (undo-tree-id1053 . -1) (undo-tree-id1054 . -1) (undo-tree-id1055 . -1) (undo-tree-id1056 . -1) (undo-tree-id1057 . -1) (undo-tree-id1058 . -1) (undo-tree-id1059 . -1) (undo-tree-id1060 . -1) (undo-tree-id1061 . -1) (undo-tree-id1062 . -1) (#("s" 0 1 (fontified nil face font-lock-type-face)) . -476) (undo-tree-id1063 . -1) (undo-tree-id1064 . -1) (undo-tree-id1065 . -1) (undo-tree-id1066 . -1) (undo-tree-id1067 . -1) (undo-tree-id1068 . -1) (undo-tree-id1069 . -1) (undo-tree-id1070 . -1) (undo-tree-id1071 . -1) (undo-tree-id1072 . -1) (undo-tree-id1073 . -1) (undo-tree-id1074 . -1) (#("t" 0 1 (fontified nil face font-lock-type-face)) . -477) (undo-tree-id1075 . -1) (undo-tree-id1076 . -1) (undo-tree-id1077 . -1) (undo-tree-id1078 . -1) (undo-tree-id1079 . -1) (undo-tree-id1080 . -1) (undo-tree-id1081 . -1) (undo-tree-id1082 . -1) (undo-tree-id1083 . -1) (undo-tree-id1084 . -1) (undo-tree-id1085 . -1) (undo-tree-id1086 . -1) (#(" " 0 1 (fontified nil)) . -478) (undo-tree-id1087 . -1) (undo-tree-id1088 . -1) (undo-tree-id1089 . -1) (undo-tree-id1090 . -1) (undo-tree-id1091 . -1) (undo-tree-id1092 . -1) (undo-tree-id1093 . -1) (undo-tree-id1094 . -1) (undo-tree-id1095 . -1) (undo-tree-id1096 . -1) (undo-tree-id1097 . -1) (undo-tree-id1098 . -1) (#("{" 0 1 (fontified nil)) . -479) (undo-tree-id1099 . -1) (undo-tree-id1100 . -1) (undo-tree-id1101 . -1) (undo-tree-id1102 . -1) (undo-tree-id1103 . 1) (undo-tree-id1104 . -1) (undo-tree-id1105 . -1) (undo-tree-id1106 . -1) (undo-tree-id1107 . -1) (undo-tree-id1108 . -1) (#("}" 0 1 (fontified t)) . 480) (undo-tree-id1109 . 1) (undo-tree-id1110 . -1)) ((458 . 481) (#("}j" 0 1 (fontified nil) 1 2 (fontified nil)) . 458) (459 . 460)) (25217 10101 470517 195000) 0 nil])
([nil nil ((#("	returnPosts = append(returnPosts, )
" 0 1 (fontified t) 1 15 (fontified t) 15 21 (fontified t face font-lock-builtin-face) 21 22 (fontified t) 22 35 (fontified t) 35 36 (fontified t) 36 37 (fontified t)) . 483) (undo-tree-id1209 . 2) (undo-tree-id1210 . -34) (undo-tree-id1211 . -35) (undo-tree-id1212 . -35) (undo-tree-id1213 . -35) 517) nil (25217 11076 651919 939000) 0 nil])
nil
([nil nil ((#("j" 0 1 (fontified t)) . -510) (undo-tree-id1184 . -1) (510 . 511) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 510) (undo-tree-id1185 . -1) (509 . 510) (508 . 510) (#("\"" 0 1 (fontified nil)) . -508) (undo-tree-id1186 . -1) (undo-tree-id1187 . -1) (508 . 509) (#("i" 0 1 (fontified t)) . -508) (undo-tree-id1188 . -1) (undo-tree-id1189 . -1) 509 (508 . 509) (504 . 508) (#("i" 0 1 (fontified t)) . -504) (undo-tree-id1190 . -1) (undo-tree-id1191 . -1) 505 (504 . 505) (509 . 510) (505 . 508) (#("				" 0 4 (fontified nil)) . 504) (504 . 508) (#("			" 0 3 (fontified nil)) . -504) (undo-tree-id1192 . -3) (507 . 508) (503 . 507) (502 . 504) (#("{" 0 1 (fontified nil)) . -502) (502 . 503) (#("{" 0 1 (fontified nil)) . -502) (undo-tree-id1193 . -1) (#("}" 0 1 (fontified t)) . 503) (502 . 504) (#("{" 0 1 (fontified nil)) . -502) (501 . 503) (#(" " 0 1 (fontified t)) . -501) (undo-tree-id1194 . -1) 502 (495 . 502) (#("]" 0 1 (fontified nil)) . 495) (494 . 495) (#(" " 0 1 (fontified nil)) . -494) (494 . 495) (#("]" 0 1 (fontified nil)) . -494) (494 . 495) (#("s" 0 1 (fontified t)) . -494) (undo-tree-id1195 . -1) (#("t" 0 1 (fontified t)) . -495) (undo-tree-id1196 . -1) (#("r" 0 1 (fontified t)) . -496) (undo-tree-id1197 . -1) (#("i" 0 1 (fontified t)) . -497) (undo-tree-id1198 . -1) (#("n" 0 1 (fontified t)) . -498) (undo-tree-id1199 . -1) (#("g" 0 1 (fontified t)) . -499) (undo-tree-id1200 . -1) 500 (494 . 500) (493 . 495) (#("[" 0 1 (fontified nil)) . -493) (493 . 494) (490 . 493) (494 . 495) (491 . 493) (#("			" 0 3 (fontified nil)) . 490) (490 . 493) (#("		" 0 2 (fontified nil)) . -490) (undo-tree-id1201 . -2) (489 . 493) (488 . 490) (#("{" 0 1 (fontified nil)) . -488) (487 . 489) (#("{" 0 1 (fontified nil)) . -487) (undo-tree-id1202 . -1) (#("}" 0 1 (fontified t)) . 488) (487 . 489) (#("{" 0 1 (fontified nil)) . -487) (483 . 488) (#("o" 0 1 (fontified t)) . -483) (undo-tree-id1203 . -1) (#("p" 0 1 (fontified t)) . -484) (undo-tree-id1204 . -1) (#("s" 0 1 (fontified t)) . -485) (undo-tree-id1205 . -1) (#("t" 0 1 (fontified t)) . -486) (undo-tree-id1206 . -1) 487 (483 . 487) (481 . 483) (482 . 483) (#("		" 0 2 (fontified nil)) . 481) (481 . 483) (#("	" 0 1 (fontified nil)) . -481) (undo-tree-id1207 . -1) (480 . 483) (#("i" 0 1 (fontified t)) . -480) (undo-tree-id1208 . -1) 481 (480 . 481)) nil (25217 11076 651906 204000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -511) (undo-tree-id1222 . -1) (511 . 512) (510 . 511) (t 25217 11076 664187 28000)) nil (25217 11079 855972 337000) 0 nil])
([nil nil ((962 . 963) (#("*" 0 1 (fontified t face font-lock-string-face)) . 962) (t 25217 11079 864194 791000)) nil (25217 11454 110970 347000) 0 nil])
([nil nil ((nil rear-nonsticky nil 113 . 114) (#("
" 0 1 (fontified nil)) . -169) (113 . 170) 112 (t 25217 11456 625131 480000)) nil (25217 11496 998236 149000) 0 nil] [nil nil ((#("
" 0 1 (fontified nil)) . -1089) (977 . 1090) 857 (t 25217 11213 808523 48000)) ((#("
			returnPosts[len(returnPosts)-1].Lines = append(returnPosts[len(returnPosts)-1].Lines, scanner.Text() + \"\\n\")
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (rear-nonsticky t fontified nil) 4 16 (fontified nil) 16 19 (fontified nil face font-lock-builtin-face) 19 40 (fontified nil) 40 41 (rear-nonsticky t fontified nil) 41 44 (fontified nil) 44 50 (fontified nil face font-lock-builtin-face) 50 51 (fontified nil) 51 63 (fontified nil) 63 66 (fontified nil face font-lock-builtin-face) 66 98 (fontified nil) 98 102 (fontified nil face font-lock-function-name-face) 102 104 (fontified nil) 104 107 (fontified nil) 107 108 (fontified nil face font-lock-string-face) 108 109 (fontified nil syntax-table (9) face font-lock-string-face) 109 110 (fontified nil face font-lock-string-face) 110 111 (fontified nil face font-lock-string-face) 111 112 (fontified nil) 112 113 (fontified nil)) . 977) (undo-tree-id1256 . -4) (undo-tree-id1257 . -1) (undo-tree-id1258 . -1) (undo-tree-id1259 . -1) (undo-tree-id1260 . -4) (1089 . 1090)) (25217 11452 793701 58000) 0 nil])
([nil nil ((119 . 123) (#("p" 0 1 (fontified t face font-lock-type-face)) . -119) (undo-tree-id1280 . -1) (#("o" 0 1 (fontified t face font-lock-type-face)) . -120) (undo-tree-id1281 . -1) (#("s" 0 1 (fontified t face font-lock-type-face)) . -121) (undo-tree-id1282 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -122) (undo-tree-id1283 . -1) 123) nil (25217 11496 998235 70000) 0 nil])
([nil nil ((#("			returnPosts[len(returnPosts)-1].Lines = append(returnPosts[len(returnPosts)-1].Lines, strings.ReplaceAll(scanner.Text(), \"@\", \"\") + \"\\n\")
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 14 (fontified t) 14 15 (fontified t) 15 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t) 19 30 (fontified t) 30 33 (fontified t) 33 40 (fontified t) 40 43 (fontified t) 43 49 (fontified t face font-lock-builtin-face) 49 50 (fontified t) 50 62 (fontified t) 62 65 (fontified t face font-lock-builtin-face) 65 89 (fontified t) 89 97 (fontified t) 97 107 (fontified t face font-lock-function-name-face) 107 116 (fontified t) 116 120 (fontified t face font-lock-function-name-face) 120 124 (fontified t) 124 125 (fontified t face font-lock-string-face) 125 126 (fontified t face font-lock-string-face) 126 127 (fontified t face font-lock-string-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-string-face) 131 135 (fontified t) 135 136 (fontified t face font-lock-string-face) 136 137 (fontified t syntax-table (9) face font-lock-string-face) 137 139 (fontified t face font-lock-string-face) 139 140 (fontified t) 140 141 (fontified t)) . 837) (undo-tree-id1223 . -125) (undo-tree-id1224 . 15) (undo-tree-id1225 . -125) (undo-tree-id1226 . -125) (undo-tree-id1227 . -141) (undo-tree-id1228 . -141) (undo-tree-id1229 . -141) (undo-tree-id1230 . -3) 840) ((837 . 978)) (25217 11447 870292 894000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -157) (undo-tree-id1270 . -1) (157 . 158) (#("s" 0 1 (fontified t face font-lock-string-face)) . -156) (undo-tree-id1271 . -1) 157 (#("L" 0 1 (fontified t)) . -137) (undo-tree-id1272 . -1) (#("i" 0 1 (fontified t)) . -138) (undo-tree-id1273 . -1) (#("n" 0 1 (fontified t)) . -139) (undo-tree-id1274 . -1) (#("e" 0 1 (fontified t)) . -140) (undo-tree-id1275 . -1) (#("s" 0 1 (fontified t)) . -141) (undo-tree-id1276 . -1) (#(" " 0 1 (fontified t)) . -142) (undo-tree-id1277 . -1) (#("[" 0 1 (fontified t)) . -143) (undo-tree-id1278 . -1) (#("]" 0 1 (fontified t)) . -144) (undo-tree-id1279 . -1) 145) nil (25217 11496 998231 480000) 0 nil])
([nil nil ((#("			returnPosts[len(returnPosts)-1].Lines = append(returnPosts[len(returnPosts)-1].Lines, scanner.Text() + \"\\n\")
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 15 (fontified t) 15 18 (fontified t face font-lock-builtin-face) 18 39 (fontified t) 39 40 (rear-nonsticky t fontified t) 40 43 (fontified t) 43 49 (fontified t face font-lock-builtin-face) 49 50 (fontified t) 50 62 (fontified t) 62 65 (fontified t face font-lock-builtin-face) 65 97 (fontified t) 97 101 (fontified t face font-lock-function-name-face) 101 103 (fontified t) 103 106 (fontified t) 106 107 (fontified t face font-lock-string-face) 107 108 (fontified t syntax-table (9) face font-lock-string-face) 108 109 (fontified t face font-lock-string-face) 109 110 (fontified t face font-lock-string-face) 110 111 (fontified t) 111 112 (fontified t)) . 837) (undo-tree-id1239 . -14) (undo-tree-id1240 . 112) (undo-tree-id1241 . -111) (undo-tree-id1242 . -14) (undo-tree-id1243 . -14) (undo-tree-id1244 . 98) (undo-tree-id1245 . -15) (undo-tree-id1246 . 79) (undo-tree-id1247 . -34) 851 (t 25217 11334 572823 837000)) ((837 . 949)) (25217 11446 989377 786000) 0 nil])
([nil nil ((nil rear-nonsticky nil 162 . 163) (#("
" 0 1 (fontified nil)) . -184) (158 . 185) 156) nil (25217 11496 998224 260000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -915) (803 . 916) 677) ((#("
			returnPosts[len(returnPosts)-1].Lines = append(returnPosts[len(returnPosts)-1].Lines, scanner.Text() + \"\\n\")
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (rear-nonsticky t fontified nil) 4 16 (fontified nil) 16 19 (fontified nil face font-lock-builtin-face) 19 40 (fontified nil) 40 41 (rear-nonsticky t fontified nil) 41 44 (fontified nil) 44 50 (fontified nil face font-lock-builtin-face) 50 51 (fontified nil) 51 63 (fontified nil) 63 66 (fontified nil face font-lock-builtin-face) 66 98 (fontified nil) 98 102 (fontified nil face font-lock-function-name-face) 102 104 (fontified nil) 104 107 (fontified nil) 107 108 (fontified nil face font-lock-string-face) 108 109 (fontified nil syntax-table (9) face font-lock-string-face) 109 110 (fontified nil face font-lock-string-face) 110 111 (fontified nil face font-lock-string-face) 111 112 (fontified nil) 112 113 (fontified nil)) . 803) (undo-tree-id1254 . -1) (undo-tree-id1255 . -1) (915 . 916)) (25217 11446 311306 711000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -182) (undo-tree-id1261 . -1) (182 . 183) (178 . 182) (#("l" 0 1 (fontified t face font-lock-string-face)) . -178) (undo-tree-id1262 . -1) (undo-tree-id1263 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -179) (undo-tree-id1264 . -1) (undo-tree-id1265 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -180) (undo-tree-id1266 . -1) (undo-tree-id1267 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -181) (undo-tree-id1268 . -1) (undo-tree-id1269 . -1) 182) nil (25217 11496 998220 385000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1060) (948 . 1061) 926) ((#("
			returnPosts[len(returnPosts)-1].Lines = append(returnPosts[len(returnPosts)-1].Lines, scanner.Text() + \"\\n\")
" 0 1 (fontified t) 1 3 (fontified nil) 3 4 (rear-nonsticky t fontified nil) 4 16 (fontified nil) 16 19 (fontified nil face font-lock-builtin-face) 19 40 (fontified nil) 40 41 (rear-nonsticky t fontified nil) 41 44 (fontified nil) 44 50 (fontified nil face font-lock-builtin-face) 50 51 (fontified nil) 51 63 (fontified nil) 63 66 (fontified nil face font-lock-builtin-face) 66 98 (fontified nil) 98 102 (fontified nil face font-lock-function-name-face) 102 104 (fontified nil) 104 107 (fontified nil) 107 108 (fontified nil face font-lock-string-face) 108 109 (fontified nil face font-lock-string-face syntax-table (9)) 109 110 (fontified nil face font-lock-string-face) 110 111 (fontified nil face font-lock-string-face) 111 112 (fontified nil) 112 113 (fontified nil)) . 948) (undo-tree-id1248 . -112) (undo-tree-id1249 . -1) (undo-tree-id1250 . -112) (undo-tree-id1251 . -1) (undo-tree-id1252 . -1) (undo-tree-id1253 . -4) (1060 . 1061)) (25217 11445 907295 468000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -184) (undo-tree-id1284 . -1) (184 . 185) (#("," 0 1 (fontified t)) . -158) (undo-tree-id1285 . -1) (undo-tree-id1286 . -1) 159 (158 . 159) (t 25217 11497 5233 924000)) nil (25217 11510 334659 139000) 0 nil])
([nil nil ((#("			returnPosts[len(returnPosts)-1].Lines = append(returnPosts[len(returnPosts)-1].Lines, strings.ReplaceAll(scanner.Text(), \"*\", \"\") + \"\\n\")
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 14 (fontified t) 14 15 (fontified t) 15 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t) 19 30 (fontified t) 30 33 (fontified t) 33 40 (fontified t) 40 43 (fontified t) 43 49 (fontified t face font-lock-builtin-face) 49 50 (fontified t) 50 62 (fontified t) 62 65 (fontified t face font-lock-builtin-face) 65 89 (fontified t) 89 97 (fontified t) 97 107 (fontified t face font-lock-function-name-face) 107 116 (fontified t) 116 120 (fontified t face font-lock-function-name-face) 120 124 (fontified t) 124 125 (fontified t face font-lock-string-face) 125 126 (fontified t face font-lock-string-face) 126 127 (fontified t face font-lock-string-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-string-face) 131 135 (fontified t) 135 136 (fontified t face font-lock-string-face) 136 137 (fontified t syntax-table (9) face font-lock-string-face) 137 139 (fontified t face font-lock-string-face) 139 140 (fontified t) 140 141 (fontified t)) . 663) (undo-tree-id1231 . -49) (undo-tree-id1232 . -49) (undo-tree-id1233 . -139) (undo-tree-id1234 . -141) (undo-tree-id1235 . -141) (undo-tree-id1236 . -3) (undo-tree-id1237 . -14) (undo-tree-id1238 . -3) 666) ((663 . 804) (t 25217 11438 321085 143000)) (25217 11438 312770 373000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-type-face)) . -173) (undo-tree-id1287 . -1) (173 . 174) (168 . 173) (133 . 142) (#("	" 0 1 (fontified t)) . -133) (undo-tree-id1288 . -1) 134 (133 . 134) (#("	" 0 1 (fontified t)) . -133) (undo-tree-id1289 . -1) (#("L" 0 1 (fontified t)) . -134) (undo-tree-id1290 . -1) (#("i" 0 1 (fontified t)) . -135) (undo-tree-id1291 . -1) (#("n" 0 1 (fontified t)) . -136) (undo-tree-id1292 . -1) (#("e" 0 1 (fontified t)) . -137) (undo-tree-id1293 . -1) (#(":" 0 1 (fontified t)) . -138) (undo-tree-id1294 . -1) 139 (133 . 134) (#("    " 0 4 (fontified nil)) . -133) (undo-tree-id1295 . -4) (undo-tree-id1296 . -4) (137 . 142) (t 25217 11510 349267 847000)) nil (25217 11528 697695 780000) 0 nil])
nil
([nil nil ((#("j" 0 1 (fontified t face font-lock-type-face)) . -93) (undo-tree-id1297 . -1) (93 . 94) (89 . 93) (#("s" 0 1 (fontified t face font-lock-type-face)) . -89) (undo-tree-id1298 . -1) (undo-tree-id1299 . -1) (undo-tree-id1300 . -1) (undo-tree-id1301 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -90) (undo-tree-id1302 . -1) (undo-tree-id1303 . -1) (undo-tree-id1304 . -1) (undo-tree-id1305 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -91) (undo-tree-id1306 . -1) (undo-tree-id1307 . -1) (undo-tree-id1308 . -1) (undo-tree-id1309 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -92) (undo-tree-id1310 . -1) (undo-tree-id1311 . -1) (undo-tree-id1312 . -1) (undo-tree-id1313 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -93) (undo-tree-id1314 . -1) (undo-tree-id1315 . -1) (undo-tree-id1316 . -1) (undo-tree-id1317 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -94) (undo-tree-id1318 . -1) (undo-tree-id1319 . -1) (undo-tree-id1320 . -1) (undo-tree-id1321 . -1) 95 (t 25217 11528 713314 582000)) nil (25217 11546 193593 631000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -630) (undo-tree-id1322 . -1) (630 . 631) (629 . 630) (#("i" 0 1 (fontified t)) . -629) (undo-tree-id1323 . -1) (undo-tree-id1324 . -1) (undo-tree-id1325 . -1) 630 (629 . 630) (#("	" 0 1 (fontified t)) . -614) (undo-tree-id1326 . -1) (undo-tree-id1327 . -1) 615 (623 . 624) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 623) (622 . 623) (621 . 623) (#("\"" 0 1 (fontified nil)) . -621) (619 . 622) (#("w" 0 1 (fontified t)) . -619) (undo-tree-id1328 . -1) 620 (615 . 620) (609 . 615) (594 . 599) (#("				" 0 4 (fontified nil)) . -594) (607 . 608) (606 . 607) (#("\"" 0 1 (fontified nil face font-lock-string-face)) . 606) (605 . 606) (604 . 606) (#("\"" 0 1 (fontified nil)) . -604) (604 . 605) (603 . 604) (594 . 598) (#("					" 0 5 (fontified nil)) . -594) (599 . 604) (594 . 599) (#("				" 0 4 (fontified t)) . -594) (undo-tree-id1329 . -4) 598 (#("	" 0 1 (fontified t)) . -598) (undo-tree-id1330 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -599) (undo-tree-id1331 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -600) (undo-tree-id1332 . -1) (#("," 0 1 (fontified t)) . -601) (undo-tree-id1333 . -1) 602 (#("	" 0 1 (fontified t)) . -607) (undo-tree-id1334 . -1) 608 (603 . 608) (#("						" 0 6 (fontified nil)) . -603) (undo-tree-id1335 . -6) (609 . 610) (603 . 609) (594 . 599) (#("				" 0 4 (fontified nil)) . -594) (601 . 602) (#("}" 0 1 (fontified t)) . -593) (undo-tree-id1336 . -1) (undo-tree-id1337 . 1) (undo-tree-id1338 . -1) 594 (592 . 594) (#("{" 0 1 (fontified nil)) . -592) (587 . 593) (582 . 587) (576 . 580) (#("s" 0 1 (fontified t face font-lock-type-face)) . -576) (undo-tree-id1339 . -1) (undo-tree-id1340 . -1) (undo-tree-id1341 . -1) (#("t" 0 1 (fontified t face font-lock-type-face)) . -577) (undo-tree-id1342 . -1) (undo-tree-id1343 . -1) (undo-tree-id1344 . -1) (#("r" 0 1 (fontified t face font-lock-type-face)) . -578) (undo-tree-id1345 . -1) (undo-tree-id1346 . -1) (undo-tree-id1347 . -1) (#("i" 0 1 (fontified t face font-lock-type-face)) . -579) (undo-tree-id1348 . -1) (undo-tree-id1349 . -1) (undo-tree-id1350 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -580) (undo-tree-id1351 . -1) (undo-tree-id1352 . -1) (undo-tree-id1353 . -1) (#("g" 0 1 (fontified t face font-lock-type-face)) . -581) (undo-tree-id1354 . -1) (undo-tree-id1355 . -1) (undo-tree-id1356 . -1) 582 (t 25217 11546 213359 166000)) nil (25217 11599 555258 947000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -892) (undo-tree-id1373 . -1) (892 . 893) (#("v" 0 1 (fontified t)) . -892) (undo-tree-id1374 . -1) 893 (892 . 893) (798 . 801) (#("				" 0 4 (fontified nil)) . 797) (797 . 801) (#("			" 0 3 (fontified nil)) . -797) (undo-tree-id1375 . -3) (800 . 801) (796 . 800) (795 . 797) (#("{" 0 1 (fontified nil)) . -795) (785 . 796) (781 . 785) (t 25217 11599 565495 371000)) nil (25217 11700 129556 467000) 0 nil])
([nil nil ((#("strings.ReplaceAll(scanner.Text(), \"*\", \"\") + \"\\n\")" 0 8 (fontified t) 8 18 (fontified t face font-lock-function-name-face) 18 27 (fontified t) 27 31 (fontified t face font-lock-function-name-face) 31 35 (fontified t) 35 36 (fontified t face font-lock-string-face) 36 37 (fontified t face font-lock-string-face) 37 38 (fontified t face font-lock-string-face) 38 40 (fontified t) 40 42 (fontified t face font-lock-string-face) 42 46 (fontified t) 46 47 (fontified t face font-lock-string-face) 47 48 (fontified t syntax-table (9) face font-lock-string-face) 48 50 (fontified t face font-lock-string-face) 50 51 (fontified t)) . 892) (undo-tree-id1365 . -50) (undo-tree-id1366 . 51) (undo-tree-id1367 . -50) (undo-tree-id1368 . -50) (undo-tree-id1369 . -50) (undo-tree-id1370 . -50) (undo-tree-id1371 . 1) (undo-tree-id1372 . -51) 942) nil (25217 11700 129552 891000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -801) (undo-tree-id1364 . -1) (801 . 802) (797 . 801)) nil (25217 11700 129547 520000) 0 nil])
([nil nil ((nil rear-nonsticky nil 851 . 852) (nil fontified nil 801 . 852) (801 . 852) 800) nil (25217 11700 129545 909000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -875) (undo-tree-id1357 . -1) (875 . 876) (871 . 875) (#("t" 0 1 (fontified t face font-lock-string-face)) . -871) (undo-tree-id1358 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -872) (undo-tree-id1359 . -1) 873 (871 . 873) (#("l" 0 1 (fontified t face font-lock-string-face)) . -871) (undo-tree-id1360 . -1) (#("i" 0 1 (fontified t face font-lock-string-face)) . -872) (undo-tree-id1361 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -873) (undo-tree-id1362 . -1) (#("e" 0 1 (fontified t face font-lock-string-face)) . -874) (undo-tree-id1363 . -1) 875 (871 . 875) (870 . 872) (#("\"" 0 1 (fontified nil)) . -870) (869 . 871) (864 . 869) (859 . 864) (801 . 807) (853 . 858) (852 . 853)) nil (25217 11700 129542 70000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -857) (undo-tree-id1376 . -1) (857 . 858) (#(")" 0 1 (fontified t rear-nonsticky t)) . -857) (undo-tree-id1377 . -1) (undo-tree-id1378 . -1) (undo-tree-id1379 . -1) (undo-tree-id1380 . -1) 858 (t 25217 11700 145753 240000)) nil (25217 11711 660414 930000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -978) (undo-tree-id1381 . -1) (978 . 979) (976 . 978) (#("i" 0 1 (fontified t)) . -976) (undo-tree-id1382 . -1) (undo-tree-id1383 . -1) 977 (976 . 977) (875 . 876) (t 25217 11711 689782 919000)) nil (25217 11723 265985 121000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -872) (undo-tree-id1384 . -1) (872 . 873) (870 . 872) (#("b" 0 1 (fontified t face font-lock-string-face)) . -870) (undo-tree-id1385 . -1) (undo-tree-id1386 . -1) (#("o" 0 1 (fontified t face font-lock-string-face)) . -871) (undo-tree-id1387 . -1) (undo-tree-id1388 . -1) (#("d" 0 1 (fontified t face font-lock-string-face)) . -872) (undo-tree-id1389 . -1) (undo-tree-id1390 . -1) (#("y" 0 1 (fontified t face font-lock-string-face)) . -873) (undo-tree-id1391 . -1) (undo-tree-id1392 . -1) 874 (t 25217 11723 281812 737000)) nil (25217 11740 992397 707000) 0 nil])
([nil nil ((871 . 872) (#("1" 0 1 (fontified t face font-lock-string-face)) . 871) (t 25217 11741 21858 400000)) nil (25217 11745 711420 841000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1012 . 1013) (#("
" 0 1 (fontified nil)) . -1204) (1009 . 1205) 997 (t 25217 11745 729870 528000)) nil (25217 11786 694838 434000) 0 nil])
([nil nil ((#("			returnPosts[len(returnPosts)-1].Lines = append(returnPosts[len(returnPosts)-1].Lines, strings.ReplaceAll(scanner.Text(), \"@\", \"\") + \"\\n\")
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 14 (fontified t) 14 15 (fontified t) 15 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t) 19 30 (fontified t) 30 33 (fontified t) 33 40 (fontified t) 40 43 (fontified t) 43 49 (fontified t face font-lock-builtin-face) 49 50 (fontified t) 50 62 (fontified t) 62 65 (fontified t face font-lock-builtin-face) 65 89 (fontified t) 89 97 (fontified t) 97 107 (fontified t face font-lock-function-name-face) 107 116 (fontified t) 116 120 (fontified t face font-lock-function-name-face) 120 124 (fontified t) 124 125 (fontified t face font-lock-string-face) 125 126 (fontified t face font-lock-string-face) 126 127 (fontified t face font-lock-string-face) 127 129 (fontified t) 129 131 (fontified t face font-lock-string-face) 131 135 (fontified t) 135 136 (fontified t face font-lock-string-face) 136 137 (syntax-table (9) fontified t face font-lock-string-face) 137 139 (fontified t face font-lock-string-face) 139 140 (fontified t) 140 141 (fontified t)) . 1205) (undo-tree-id1398 . -3) 1208) nil (25217 11786 694837 570000) 0 nil])
([nil nil ((1071 . 1072) (#("*" 0 1 (fontified t face font-lock-string-face)) . 1071)) nil (25217 11786 694836 262000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -1101) (undo-tree-id1393 . -1) 1102 (1101 . 1102) (1098 . 1101) (#("h" 0 1 (fontified t face font-lock-string-face)) . -1098) (undo-tree-id1394 . -1) (undo-tree-id1395 . -1) (#("2" 0 1 (fontified t face font-lock-string-face)) . -1099) (undo-tree-id1396 . -1) (undo-tree-id1397 . -1) 1100) nil (25217 11807 743460 525000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1413) (1217 . 1414) 1216 (t 25217 11786 709976 164000)) nil (25217 11837 506484 576000) 0 nil] [nil nil ((#("returnPosts[len(returnPosts)-1].Lines, scanner.Text() + \"\\n\"" 0 12 (fontified t) 12 15 (fontified t face font-lock-builtin-face) 15 47 (fontified t) 47 51 (fontified t face font-lock-function-name-face) 51 53 (fontified t) 53 56 (fontified t) 56 57 (fontified t face font-lock-string-face) 57 58 (syntax-table (9) fontified t face font-lock-string-face) 58 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face)) . 1268) (undo-tree-id1399 . -59) (undo-tree-id1400 . -59) (undo-tree-id1401 . -60) (undo-tree-id1402 . -60) (undo-tree-id1403 . -60) (undo-tree-id1404 . -60) (undo-tree-id1405 . -59) (t 25217 11786 709976 164000)) ((1268 . 1328)) (25217 11807 743116 510000) 0 nil])
([nil nil ((#("returnPosts[len(returnPosts)-1].Lines, scanner.Text() + \"\\n\")" 0 12 (fontified t) 12 15 (fontified t face font-lock-builtin-face) 15 47 (fontified t) 47 51 (fontified t face font-lock-function-name-face) 51 53 (fontified t) 53 56 (fontified t) 56 57 (fontified t face font-lock-string-face) 57 58 (syntax-table (9) fontified t face font-lock-string-face) 58 59 (fontified t face font-lock-string-face) 59 60 (fontified t face font-lock-string-face) 60 61 (fontified t)) . 1464) (undo-tree-id1571 . -60) (undo-tree-id1572 . -60) (undo-tree-id1573 . -60) (undo-tree-id1574 . -60) (undo-tree-id1575 . -60) (undo-tree-id1576 . -60) (undo-tree-id1577 . -61) (undo-tree-id1578 . -60) (undo-tree-id1579 . 1) (undo-tree-id1580 . -61) (undo-tree-id1581 . -60) 1524) nil (25217 11837 506483 532000) 0 nil])
nil
([nil nil ((#("j" 0 1 (fontified t)) . -1243) (undo-tree-id1416 . -1) (1243 . 1244) (#("s" 0 1 (fontified t)) . -1243) (undo-tree-id1417 . -1) (undo-tree-id1418 . -1) (undo-tree-id1419 . -1) (undo-tree-id1420 . -1) (undo-tree-id1421 . -1) (undo-tree-id1422 . -1) (#("t" 0 1 (fontified t)) . -1244) (undo-tree-id1423 . -1) (undo-tree-id1424 . -1) (undo-tree-id1425 . -1) (undo-tree-id1426 . -1) (undo-tree-id1427 . -1) (undo-tree-id1428 . -1) (#("r" 0 1 (fontified t)) . -1245) (undo-tree-id1429 . -1) (undo-tree-id1430 . -1) (undo-tree-id1431 . -1) (undo-tree-id1432 . -1) (undo-tree-id1433 . -1) (undo-tree-id1434 . -1) (#("i" 0 1 (fontified t)) . -1246) (undo-tree-id1435 . -1) (undo-tree-id1436 . -1) (undo-tree-id1437 . -1) (undo-tree-id1438 . -1) (undo-tree-id1439 . -1) (undo-tree-id1440 . -1) (#("n" 0 1 (fontified t)) . -1247) (undo-tree-id1441 . -1) (undo-tree-id1442 . -1) (undo-tree-id1443 . -1) (undo-tree-id1444 . -1) (undo-tree-id1445 . -1) (undo-tree-id1446 . -1) (#("g" 0 1 (fontified t)) . -1248) (undo-tree-id1447 . -1) (undo-tree-id1448 . -1) (undo-tree-id1449 . -1) (undo-tree-id1450 . -1) (undo-tree-id1451 . -1) (undo-tree-id1452 . -1) (#("s" 0 1 (fontified t)) . -1249) (undo-tree-id1453 . -1) (undo-tree-id1454 . -1) (undo-tree-id1455 . -1) (undo-tree-id1456 . -1) (undo-tree-id1457 . -1) (undo-tree-id1458 . -1) (#("." 0 1 (fontified t)) . -1250) (undo-tree-id1459 . -1) (undo-tree-id1460 . -1) (undo-tree-id1461 . -1) (undo-tree-id1462 . -1) (undo-tree-id1463 . -1) (undo-tree-id1464 . -1) 1251 (#("R" 0 1 (fontified t)) . -1251) (undo-tree-id1465 . -1) (undo-tree-id1466 . -1) (undo-tree-id1467 . -1) (undo-tree-id1468 . -1) (undo-tree-id1469 . -1) (undo-tree-id1470 . -1) (#("e" 0 1 (fontified t)) . -1252) (undo-tree-id1471 . -1) (undo-tree-id1472 . -1) (undo-tree-id1473 . -1) (undo-tree-id1474 . -1) (undo-tree-id1475 . -1) (undo-tree-id1476 . -1) (#("p" 0 1 (fontified t)) . -1253) (undo-tree-id1477 . -1) (undo-tree-id1478 . -1) (undo-tree-id1479 . -1) (undo-tree-id1480 . -1) (undo-tree-id1481 . -1) (undo-tree-id1482 . -1) (#("l" 0 1 (fontified t)) . -1254) (undo-tree-id1483 . -1) (undo-tree-id1484 . -1) (undo-tree-id1485 . -1) (undo-tree-id1486 . -1) (undo-tree-id1487 . -1) (undo-tree-id1488 . -1) (#("a" 0 1 (fontified t)) . -1255) (undo-tree-id1489 . -1) (undo-tree-id1490 . -1) (undo-tree-id1491 . -1) (undo-tree-id1492 . -1) (undo-tree-id1493 . -1) (undo-tree-id1494 . -1) (#("c" 0 1 (fontified t)) . -1256) (undo-tree-id1495 . -1) (undo-tree-id1496 . -1) (undo-tree-id1497 . -1) (undo-tree-id1498 . -1) (undo-tree-id1499 . -1) (undo-tree-id1500 . -1) (#("e" 0 1 (fontified t)) . -1257) (undo-tree-id1501 . -1) (undo-tree-id1502 . -1) (undo-tree-id1503 . -1) (undo-tree-id1504 . -1) (undo-tree-id1505 . -1) (undo-tree-id1506 . -1) (#("A" 0 1 (fontified t)) . -1258) (undo-tree-id1507 . -1) (undo-tree-id1508 . -1) (undo-tree-id1509 . -1) (undo-tree-id1510 . -1) (undo-tree-id1511 . -1) (undo-tree-id1512 . -1) (#("l" 0 1 (fontified t)) . -1259) (undo-tree-id1513 . -1) (undo-tree-id1514 . -1) (undo-tree-id1515 . -1) (undo-tree-id1516 . -1) (undo-tree-id1517 . -1) (undo-tree-id1518 . -1) (#("l" 0 1 (fontified t)) . -1260) (undo-tree-id1519 . -1) (undo-tree-id1520 . -1) (undo-tree-id1521 . -1) (undo-tree-id1522 . -1) (undo-tree-id1523 . -1) (undo-tree-id1524 . -1) (#("(" 0 1 (fontified t)) . -1261) (undo-tree-id1525 . -1) (undo-tree-id1526 . -1) (undo-tree-id1527 . -1) (undo-tree-id1528 . -1) (#("s" 0 1 (fontified t)) . -1262) (undo-tree-id1529 . -1) (undo-tree-id1530 . -1) (#("c" 0 1 (fontified t)) . -1263) (undo-tree-id1531 . -1) (undo-tree-id1532 . -1) (#("a" 0 1 (fontified t)) . -1264) (undo-tree-id1533 . -1) (undo-tree-id1534 . -1) (#("n" 0 1 (fontified t)) . -1265) (undo-tree-id1535 . -1) (undo-tree-id1536 . -1) (#("n" 0 1 (fontified t)) . -1266) (undo-tree-id1537 . -1) (undo-tree-id1538 . -1) (#("e" 0 1 (fontified t)) . -1267) (undo-tree-id1539 . -1) (undo-tree-id1540 . -1) (#("r" 0 1 (fontified t)) . -1268) (undo-tree-id1541 . -1) (undo-tree-id1542 . -1) (#("." 0 1 (fontified t)) . -1269) (undo-tree-id1543 . -1) (undo-tree-id1544 . -1) (#("T" 0 1 (fontified t)) . -1270) (undo-tree-id1545 . -1) (undo-tree-id1546 . -1) (#("e" 0 1 (fontified t)) . -1271) (undo-tree-id1547 . -1) (undo-tree-id1548 . -1) 1272 (#("x" 0 1 (fontified t)) . -1272) (undo-tree-id1549 . -1) (undo-tree-id1550 . -1) (#("t" 0 1 (fontified t)) . -1273) (undo-tree-id1551 . -1) (#("(" 0 1 (fontified t)) . -1274) (undo-tree-id1552 . -1) (#(")" 0 1 (fontified t)) . -1275) (undo-tree-id1553 . -1) (#("," 0 1 (fontified t)) . -1276) (undo-tree-id1554 . -1) (#(" " 0 1 (fontified t)) . -1277) (undo-tree-id1555 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1278) (undo-tree-id1556 . -1) (#("@" 0 1 (fontified t face font-lock-string-face)) . -1279) (undo-tree-id1557 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1280) (undo-tree-id1558 . -1) (#("," 0 1 (fontified t)) . -1281) (undo-tree-id1559 . -1) (#(" " 0 1 (fontified t)) . -1282) (undo-tree-id1560 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1283) (undo-tree-id1561 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1284) (undo-tree-id1562 . -1) (#(")" 0 1 (fontified t)) . -1285) (undo-tree-id1563 . -1) (#(" " 0 1 (fontified t)) . -1286) (undo-tree-id1564 . -1) (#("+" 0 1 (fontified t)) . -1287) (undo-tree-id1565 . -1) (#(" " 0 1 (fontified t)) . -1288) (undo-tree-id1566 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1289) (undo-tree-id1567 . -1) (#("\\" 0 1 (fontified t syntax-table (9) face font-lock-string-face)) . -1290) (undo-tree-id1568 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1291) (undo-tree-id1569 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1292) (undo-tree-id1570 . -1) 1293) nil (25217 11837 506470 443000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1303 . 1304) (nil fontified nil 1243 . 1304) (1243 . 1304) 1242) nil (25217 11837 506299 933000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -1320) (undo-tree-id1406 . -1) (1320 . 1321) (1316 . 1320) (#("i" 0 1 (fontified t face font-lock-string-face)) . -1316) (undo-tree-id1407 . -1) (undo-tree-id1408 . -1) (#("m" 0 1 (fontified t face font-lock-string-face)) . -1317) (undo-tree-id1409 . -1) (undo-tree-id1410 . -1) (#("g" 0 1 (fontified t face font-lock-string-face)) . -1318) (undo-tree-id1411 . -1) (undo-tree-id1412 . -1) 1319 (#(")" 0 1 (fontified t rear-nonsticky t)) . -1303) (undo-tree-id1413 . -1) (undo-tree-id1414 . 1) (undo-tree-id1415 . -1) 1304) nil (25217 11837 506296 15000) 0 nil])
([nil nil ((#("			returnPosts[len(returnPosts)-1].Lines = append(
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 15 (fontified t) 15 18 (fontified t face font-lock-builtin-face) 18 39 (fontified t) 39 40 (rear-nonsticky t fontified t) 40 43 (fontified t) 43 49 (fontified t face font-lock-builtin-face) 49 50 (fontified t) 50 51 (fontified t)) . 1425) (undo-tree-id1582 . -50) (undo-tree-id1583 . 1) (undo-tree-id1584 . -50) (undo-tree-id1585 . -50) (undo-tree-id1586 . -50) (undo-tree-id1587 . -49) (undo-tree-id1588 . -49) (undo-tree-id1589 . -49) (undo-tree-id1590 . -50) (undo-tree-id1591 . -50) (undo-tree-id1592 . -51) (undo-tree-id1593 . -51) (undo-tree-id1594 . -51) (undo-tree-id1595 . -50) (undo-tree-id1596 . -21) (undo-tree-id1597 . -21) 1446 (t 25217 11837 518107 371000)) nil (25217 11843 444569 845000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -1243) (undo-tree-id1598 . -1) (1243 . 1244) (#("r" 0 1 (fontified t)) . -1243) (undo-tree-id1599 . -1) (undo-tree-id1600 . -1) (undo-tree-id1601 . -1) (undo-tree-id1602 . -1) (undo-tree-id1603 . -1) (undo-tree-id1604 . -1) (undo-tree-id1605 . -1) (undo-tree-id1606 . -1) (undo-tree-id1607 . -1) (undo-tree-id1608 . -1) (undo-tree-id1609 . -1) (undo-tree-id1610 . -1) (#("e" 0 1 (fontified t)) . -1244) (undo-tree-id1611 . -1) (undo-tree-id1612 . -1) (undo-tree-id1613 . -1) (undo-tree-id1614 . -1) (undo-tree-id1615 . -1) (undo-tree-id1616 . -1) (undo-tree-id1617 . -1) (undo-tree-id1618 . -1) (undo-tree-id1619 . -1) (undo-tree-id1620 . -1) (undo-tree-id1621 . -1) (undo-tree-id1622 . -1) (#("t" 0 1 (fontified t)) . -1245) (undo-tree-id1623 . -1) (undo-tree-id1624 . -1) (undo-tree-id1625 . -1) (undo-tree-id1626 . -1) (undo-tree-id1627 . -1) (undo-tree-id1628 . -1) (undo-tree-id1629 . -1) (undo-tree-id1630 . -1) (undo-tree-id1631 . -1) (undo-tree-id1632 . -1) (undo-tree-id1633 . -1) (undo-tree-id1634 . -1) (#("u" 0 1 (fontified t)) . -1246) (undo-tree-id1635 . -1) (undo-tree-id1636 . -1) (undo-tree-id1637 . -1) (undo-tree-id1638 . -1) (undo-tree-id1639 . -1) (undo-tree-id1640 . -1) (undo-tree-id1641 . -1) (undo-tree-id1642 . -1) (undo-tree-id1643 . -1) (undo-tree-id1644 . -1) (undo-tree-id1645 . -1) (undo-tree-id1646 . -1) (#("r" 0 1 (fontified t)) . -1247) (undo-tree-id1647 . -1) (undo-tree-id1648 . -1) (undo-tree-id1649 . -1) (undo-tree-id1650 . -1) (undo-tree-id1651 . -1) (undo-tree-id1652 . -1) (undo-tree-id1653 . -1) (undo-tree-id1654 . -1) (undo-tree-id1655 . -1) (undo-tree-id1656 . -1) (undo-tree-id1657 . -1) (undo-tree-id1658 . -1) (#("n" 0 1 (fontified t)) . -1248) (undo-tree-id1659 . -1) (undo-tree-id1660 . -1) (undo-tree-id1661 . -1) (undo-tree-id1662 . -1) (undo-tree-id1663 . -1) (undo-tree-id1664 . -1) (undo-tree-id1665 . -1) (undo-tree-id1666 . -1) (undo-tree-id1667 . -1) (undo-tree-id1668 . -1) (undo-tree-id1669 . -1) (undo-tree-id1670 . -1) (#("P" 0 1 (fontified t)) . -1249) (undo-tree-id1671 . -1) (undo-tree-id1672 . -1) (undo-tree-id1673 . -1) (undo-tree-id1674 . -1) (undo-tree-id1675 . -1) (undo-tree-id1676 . -1) (undo-tree-id1677 . -1) (undo-tree-id1678 . -1) (undo-tree-id1679 . -1) (undo-tree-id1680 . -1) (undo-tree-id1681 . -1) (undo-tree-id1682 . -1) (#("o" 0 1 (fontified t)) . -1250) (undo-tree-id1683 . -1) (undo-tree-id1684 . -1) (undo-tree-id1685 . -1) (undo-tree-id1686 . -1) (undo-tree-id1687 . -1) (undo-tree-id1688 . -1) (undo-tree-id1689 . -1) (undo-tree-id1690 . -1) (undo-tree-id1691 . -1) (undo-tree-id1692 . -1) (undo-tree-id1693 . -1) (undo-tree-id1694 . -1) (#("s" 0 1 (fontified t)) . -1251) (undo-tree-id1695 . -1) (undo-tree-id1696 . -1) (undo-tree-id1697 . -1) (undo-tree-id1698 . -1) (undo-tree-id1699 . -1) (undo-tree-id1700 . -1) (undo-tree-id1701 . -1) (undo-tree-id1702 . -1) (undo-tree-id1703 . -1) (undo-tree-id1704 . -1) (undo-tree-id1705 . -1) (undo-tree-id1706 . -1) (#("t" 0 1 (fontified t)) . -1252) (undo-tree-id1707 . -1) (undo-tree-id1708 . -1) (undo-tree-id1709 . -1) (undo-tree-id1710 . -1) (undo-tree-id1711 . -1) (undo-tree-id1712 . -1) (undo-tree-id1713 . -1) (undo-tree-id1714 . -1) (undo-tree-id1715 . -1) (undo-tree-id1716 . -1) (undo-tree-id1717 . -1) (undo-tree-id1718 . -1) (#("s" 0 1 (fontified t)) . -1253) (undo-tree-id1719 . -1) (undo-tree-id1720 . -1) (undo-tree-id1721 . -1) (undo-tree-id1722 . -1) (undo-tree-id1723 . -1) (undo-tree-id1724 . -1) (undo-tree-id1725 . -1) (undo-tree-id1726 . -1) (undo-tree-id1727 . -1) (undo-tree-id1728 . -1) (undo-tree-id1729 . -1) (undo-tree-id1730 . -1) (#("[" 0 1 (fontified t)) . -1254) (undo-tree-id1731 . -1) (undo-tree-id1732 . -1) (undo-tree-id1733 . -1) (undo-tree-id1734 . -1) (undo-tree-id1735 . -1) (undo-tree-id1736 . -1) (undo-tree-id1737 . -1) (undo-tree-id1738 . -1) (undo-tree-id1739 . -1) (undo-tree-id1740 . -1) (#("l" 0 1 (fontified t)) . -1255) (undo-tree-id1741 . -1) (undo-tree-id1742 . -1) (undo-tree-id1743 . -1) (undo-tree-id1744 . -1) (undo-tree-id1745 . -1) (undo-tree-id1746 . -1) (undo-tree-id1747 . -1) (undo-tree-id1748 . -1) (#("e" 0 1 (fontified t)) . -1256) (undo-tree-id1749 . -1) (undo-tree-id1750 . -1) (undo-tree-id1751 . -1) (undo-tree-id1752 . -1) (undo-tree-id1753 . -1) (undo-tree-id1754 . -1) (undo-tree-id1755 . -1) (undo-tree-id1756 . -1) (#("n" 0 1 (fontified t)) . -1257) (undo-tree-id1757 . -1) (undo-tree-id1758 . -1) (undo-tree-id1759 . -1) (undo-tree-id1760 . -1) (undo-tree-id1761 . -1) (undo-tree-id1762 . -1) (undo-tree-id1763 . -1) (undo-tree-id1764 . -1) (#("(" 0 1 (fontified t)) . -1258) (undo-tree-id1765 . -1) (undo-tree-id1766 . -1) (undo-tree-id1767 . -1) (undo-tree-id1768 . -1) (undo-tree-id1769 . -1) (undo-tree-id1770 . -1) (#("r" 0 1 (fontified t)) . -1259) (undo-tree-id1771 . -1) (undo-tree-id1772 . -1) (undo-tree-id1773 . -1) (undo-tree-id1774 . -1) (#("e" 0 1 (fontified t)) . -1260) (undo-tree-id1775 . -1) (undo-tree-id1776 . -1) (undo-tree-id1777 . -1) (undo-tree-id1778 . -1) 1261 (#("t" 0 1 (fontified t)) . -1261) (undo-tree-id1779 . -1) (undo-tree-id1780 . -1) (undo-tree-id1781 . -1) (undo-tree-id1782 . -1) (#("u" 0 1 (fontified t)) . -1262) (undo-tree-id1783 . -1) (undo-tree-id1784 . -1) (undo-tree-id1785 . -1) (undo-tree-id1786 . -1) (#("r" 0 1 (fontified t)) . -1263) (undo-tree-id1787 . -1) (undo-tree-id1788 . -1) (undo-tree-id1789 . -1) (undo-tree-id1790 . -1) (#("n" 0 1 (fontified t)) . -1264) (undo-tree-id1791 . -1) (undo-tree-id1792 . -1) (undo-tree-id1793 . -1) (undo-tree-id1794 . -1) (#("P" 0 1 (fontified t)) . -1265) (undo-tree-id1795 . -1) (undo-tree-id1796 . -1) (undo-tree-id1797 . -1) (undo-tree-id1798 . -1) (#("o" 0 1 (fontified t)) . -1266) (undo-tree-id1799 . -1) (undo-tree-id1800 . -1) (undo-tree-id1801 . -1) (undo-tree-id1802 . -1) (#("s" 0 1 (fontified t)) . -1267) (undo-tree-id1803 . -1) (undo-tree-id1804 . -1) (undo-tree-id1805 . -1) (undo-tree-id1806 . -1) (#("t" 0 1 (fontified t)) . -1268) (undo-tree-id1807 . -1) (undo-tree-id1808 . -1) (undo-tree-id1809 . -1) (undo-tree-id1810 . -1) (#("s" 0 1 (fontified t)) . -1269) (undo-tree-id1811 . -1) (undo-tree-id1812 . -1) (undo-tree-id1813 . -1) (undo-tree-id1814 . -1) (#(")" 0 1 (fontified t)) . -1270) (undo-tree-id1815 . -1) (undo-tree-id1816 . -1) (undo-tree-id1817 . -1) (#("-" 0 1 (fontified t)) . -1271) (undo-tree-id1818 . -1) (undo-tree-id1819 . -1) (undo-tree-id1820 . -1) (#("1" 0 1 (fontified t)) . -1272) (undo-tree-id1821 . -1) (undo-tree-id1822 . -1) (undo-tree-id1823 . -1) (#("]" 0 1 (fontified t)) . -1273) (undo-tree-id1824 . -1) (undo-tree-id1825 . -1) (undo-tree-id1826 . -1) (#("." 0 1 (fontified t)) . -1274) (undo-tree-id1827 . -1) (undo-tree-id1828 . -1) (undo-tree-id1829 . -1) (#("L" 0 1 (fontified t)) . -1275) (undo-tree-id1830 . -1) (undo-tree-id1831 . -1) (undo-tree-id1832 . -1) (#("i" 0 1 (fontified t)) . -1276) (undo-tree-id1833 . -1) (undo-tree-id1834 . -1) (undo-tree-id1835 . -1) (#("n" 0 1 (fontified t)) . -1277) (undo-tree-id1836 . -1) (undo-tree-id1837 . -1) (undo-tree-id1838 . -1) (#("e" 0 1 (fontified t)) . -1278) (undo-tree-id1839 . -1) (undo-tree-id1840 . -1) (undo-tree-id1841 . -1) (#("s" 0 1 (fontified t)) . -1279) (undo-tree-id1842 . -1) (undo-tree-id1843 . -1) (undo-tree-id1844 . -1) (#("," 0 1 (fontified t)) . -1280) (undo-tree-id1845 . -1) (undo-tree-id1846 . -1) (undo-tree-id1847 . -1) (#(" " 0 1 (fontified t)) . -1281) (undo-tree-id1848 . -1) (undo-tree-id1849 . -1) (undo-tree-id1850 . -1) 1282 (t 25217 11843 462122 740000)) nil (25217 11864 446428 617000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -850) (undo-tree-id1851 . -1) (850 . 851) (#(" " 0 1 (fontified t)) . -850) (undo-tree-id1852 . -1) (undo-tree-id1853 . -1) (undo-tree-id1854 . -1) (undo-tree-id1855 . -1) (undo-tree-id1856 . -1) (undo-tree-id1857 . -1) (undo-tree-id1858 . -1) (undo-tree-id1859 . -1) (undo-tree-id1860 . -1) (undo-tree-id1861 . -1) (undo-tree-id1862 . -1) (undo-tree-id1863 . -1) (undo-tree-id1864 . -1) (undo-tree-id1865 . -1) (#("+" 0 1 (fontified t)) . -851) (undo-tree-id1866 . -1) (undo-tree-id1867 . -1) (undo-tree-id1868 . -1) (undo-tree-id1869 . -1) (undo-tree-id1870 . -1) (undo-tree-id1871 . -1) (undo-tree-id1872 . -1) (undo-tree-id1873 . -1) (undo-tree-id1874 . -1) (undo-tree-id1875 . -1) (undo-tree-id1876 . -1) (undo-tree-id1877 . -1) (undo-tree-id1878 . -1) (undo-tree-id1879 . -1) (#(" " 0 1 (fontified t)) . -852) (undo-tree-id1880 . -1) (undo-tree-id1881 . -1) (undo-tree-id1882 . -1) (undo-tree-id1883 . -1) (undo-tree-id1884 . -1) (undo-tree-id1885 . -1) (undo-tree-id1886 . -1) (undo-tree-id1887 . -1) (undo-tree-id1888 . -1) (undo-tree-id1889 . -1) (undo-tree-id1890 . -1) (undo-tree-id1891 . -1) (undo-tree-id1892 . -1) (undo-tree-id1893 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -853) (undo-tree-id1894 . -1) (undo-tree-id1895 . -1) (undo-tree-id1896 . -1) (undo-tree-id1897 . -1) (undo-tree-id1898 . -1) (undo-tree-id1899 . -1) (undo-tree-id1900 . -1) (undo-tree-id1901 . -1) (undo-tree-id1902 . -1) (undo-tree-id1903 . -1) (undo-tree-id1904 . -1) (#("\\" 0 1 (fontified t syntax-table (9) face font-lock-string-face)) . -854) (undo-tree-id1905 . -1) (undo-tree-id1906 . -1) (undo-tree-id1907 . -1) (undo-tree-id1908 . -1) (undo-tree-id1909 . -1) (undo-tree-id1910 . -1) (undo-tree-id1911 . -1) (undo-tree-id1912 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -855) (undo-tree-id1913 . -1) (undo-tree-id1914 . -1) (undo-tree-id1915 . -1) (undo-tree-id1916 . -1) (undo-tree-id1917 . -1) (undo-tree-id1918 . -1) (undo-tree-id1919 . -1) (undo-tree-id1920 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -856) (undo-tree-id1921 . -1) (undo-tree-id1922 . -1) (undo-tree-id1923 . -1) (undo-tree-id1924 . -1) (undo-tree-id1925 . -1) 857 (#(" " 0 1 (fontified t)) . -1078) (undo-tree-id1926 . -1) (undo-tree-id1927 . -1) (undo-tree-id1928 . -1) (undo-tree-id1929 . -1) (undo-tree-id1930 . -1) (undo-tree-id1931 . -1) (undo-tree-id1932 . -1) (undo-tree-id1933 . -1) (#("+" 0 1 (fontified t)) . -1079) (undo-tree-id1934 . -1) (undo-tree-id1935 . -1) (undo-tree-id1936 . -1) (undo-tree-id1937 . -1) (undo-tree-id1938 . -1) (undo-tree-id1939 . -1) (undo-tree-id1940 . -1) (undo-tree-id1941 . -1) (#(" " 0 1 (fontified t)) . -1080) (undo-tree-id1942 . -1) (undo-tree-id1943 . -1) (undo-tree-id1944 . -1) (undo-tree-id1945 . -1) (undo-tree-id1946 . -1) (undo-tree-id1947 . -1) (undo-tree-id1948 . -1) (undo-tree-id1949 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1081) (undo-tree-id1950 . -1) (undo-tree-id1951 . -1) (undo-tree-id1952 . -1) (undo-tree-id1953 . -1) (undo-tree-id1954 . -1) (#("\\" 0 1 (fontified t syntax-table (9) face font-lock-string-face)) . -1082) (undo-tree-id1955 . -1) (undo-tree-id1956 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1083) (undo-tree-id1957 . -1) (undo-tree-id1958 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1084) (undo-tree-id1959 . -1) 1085 (#(" " 0 1 (fontified t)) . -1257) (undo-tree-id1960 . -1) (undo-tree-id1961 . -1) (undo-tree-id1962 . -1) (undo-tree-id1963 . -1) (#("+" 0 1 (fontified t)) . -1258) (undo-tree-id1964 . -1) (undo-tree-id1965 . -1) (undo-tree-id1966 . -1) (undo-tree-id1967 . -1) (#(" " 0 1 (fontified t)) . -1259) (undo-tree-id1968 . -1) (undo-tree-id1969 . -1) (undo-tree-id1970 . -1) (undo-tree-id1971 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1260) (undo-tree-id1972 . -1) (undo-tree-id1973 . -1) (undo-tree-id1974 . -1) (undo-tree-id1975 . -1) (#("\\" 0 1 (fontified t syntax-table (9) face font-lock-string-face)) . -1261) (undo-tree-id1976 . -1) (undo-tree-id1977 . -1) (undo-tree-id1978 . -1) (undo-tree-id1979 . -1) (#("n" 0 1 (fontified t face font-lock-string-face)) . -1262) (undo-tree-id1980 . -1) (undo-tree-id1981 . -1) (undo-tree-id1982 . -1) (undo-tree-id1983 . -1) (#("\"" 0 1 (fontified t face font-lock-string-face)) . -1263) (undo-tree-id1984 . -1) (undo-tree-id1985 . -1) (undo-tree-id1986 . -1) (undo-tree-id1987 . -1) 1264 (t 25217 11864 462177 57000)) nil (25217 11919 924277 424000) 0 nil])
([nil nil ((nil rear-nonsticky nil 757 . 758) (#("
" 0 1 (fontified nil)) . -792) (755 . 793) 748 (t 25217 11919 938320 725000)) nil (25218 21974 379404 132000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-variable-name-face)) . -764) (undo-tree-id1988 . -1) (764 . 765) (760 . 764) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -760) (undo-tree-id1989 . -1) (undo-tree-id1990 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -761) (undo-tree-id1991 . -1) (undo-tree-id1992 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -762) (undo-tree-id1993 . -1) (undo-tree-id1994 . -1) 763 (758 . 763) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -758) (undo-tree-id1995 . -1) (undo-tree-id1996 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -759) (undo-tree-id1997 . -1) (undo-tree-id1998 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -760) (undo-tree-id1999 . -1) (undo-tree-id2000 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -761) (undo-tree-id2001 . -1) (undo-tree-id2002 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -762) (undo-tree-id2003 . -1) (undo-tree-id2004 . -1) 763 (758 . 763) (#("f" 0 1 (fontified t face font-lock-variable-name-face)) . -758) (undo-tree-id2005 . -1) (undo-tree-id2006 . -1) (#("i" 0 1 (fontified t face font-lock-variable-name-face)) . -759) (undo-tree-id2007 . -1) (undo-tree-id2008 . -1) (#("r" 0 1 (fontified t face font-lock-variable-name-face)) . -760) (undo-tree-id2009 . -1) (undo-tree-id2010 . -1) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -761) (undo-tree-id2011 . -1) (undo-tree-id2012 . -1) (#("t" 0 1 (fontified t face font-lock-variable-name-face)) . -762) (undo-tree-id2013 . -1) (undo-tree-id2014 . -1) 763) nil (25218 21974 379399 250000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -831) (793 . 832) 763 (t 25218 21974 396161 603000)) nil (25218 21981 687854 619000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -869) (831 . 870) 796) nil (25218 21981 687853 295000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-variable-name-face)) . -839) (undo-tree-id2015 . -1) (839 . 840) (833 . 839) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -833) (undo-tree-id2016 . -1) (undo-tree-id2017 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -834) (undo-tree-id2018 . -1) (undo-tree-id2019 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -835) (undo-tree-id2020 . -1) (undo-tree-id2021 . -1) (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -836) (undo-tree-id2022 . -1) (undo-tree-id2023 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -837) (undo-tree-id2024 . -1) (undo-tree-id2025 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -838) (undo-tree-id2026 . -1) 839 (796 . 801) (#("s" 0 1 (fontified t face font-lock-variable-name-face)) . -796) (undo-tree-id2027 . -1) (#("e" 0 1 (fontified t face font-lock-variable-name-face)) . -797) (undo-tree-id2028 . -1) (#("c" 0 1 (fontified t face font-lock-variable-name-face)) . -798) (undo-tree-id2029 . -1) 799 (#("o" 0 1 (fontified t face font-lock-variable-name-face)) . -799) (undo-tree-id2030 . -1) (#("n" 0 1 (fontified t face font-lock-variable-name-face)) . -800) (undo-tree-id2031 . -1) (#("d" 0 1 (fontified t face font-lock-variable-name-face)) . -801) (undo-tree-id2032 . -1) 802) nil (25218 21981 687848 376000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -978) (undo-tree-id2033 . -1) (978 . 979) (866 . 867) (#("1" 0 1 (fontified t)) . -866) (undo-tree-id2034 . -1) 867 (864 . 865) (#("0" 0 1 (fontified t)) . -864) (undo-tree-id2035 . -1) 865 (828 . 829) (#("1" 0 1 (fontified t)) . -828) (undo-tree-id2036 . -1) 829 (826 . 827) (#("3" 0 1 (fontified t)) . -826) (undo-tree-id2037 . -1) 827 (826 . 827) (#("0" 0 1 (fontified t)) . -826) (undo-tree-id2038 . -1) 827 (791 . 792) (#("1" 0 1 (fontified t)) . -791) (undo-tree-id2039 . -1) 792 (789 . 790) (#("0" 0 1 (fontified t)) . -789) (undo-tree-id2040 . -1) 790 (t 25218 21981 712178 754000)) nil (25218 22009 580881 742000) 0 nil])
([nil nil ((977 . 978) (#("2" 0 1 (fontified t face font-lock-string-face)) . 977) (t 25218 22009 596244 311000)) nil (25218 22154 739780 393000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1084 . 1085) (#("
" 0 1 (fontified nil)) . -1296) (1082 . 1297) 994) nil (25218 22154 739779 860000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -1113) (undo-tree-id2056 . -1) (1113 . 1114) (1085 . 1087) (1089 . 1090) (#(" " 0 1 (fontified t)) . -1088) (undo-tree-id2057 . -1) 1089 (1088 . 1089) (#(" " 0 1 (fontified t)) . -1088) (undo-tree-id2058 . -1) 1089 (1088 . 1089) (1085 . 1089)) nil (25218 22154 739779 45000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-type-face)) . -1117) (undo-tree-id2047 . -1) (1117 . 1118) (1114 . 1117) (#("a" 0 1 (fontified t face font-lock-type-face)) . -1114) (undo-tree-id2048 . -1) (undo-tree-id2049 . -1) (#("n" 0 1 (fontified t face font-lock-type-face)) . -1115) (undo-tree-id2050 . -1) (undo-tree-id2051 . -1) (#("d" 0 1 (fontified t face font-lock-type-face)) . -1116) (undo-tree-id2052 . -1) (undo-tree-id2053 . -1) (#(" " 0 1 (fontified t)) . -1117) (undo-tree-id2054 . -1) (undo-tree-id2055 . -1) 1118 (1114 . 1118)) nil (25218 22154 739749 675000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1134 . 1135) (nil fontified nil 1117 . 1135) (1117 . 1135) 1116) nil (25218 22154 739745 77000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -1124) (undo-tree-id2041 . -1) (1124 . 1125) (1117 . 1123) (#("f" 0 1 (fontified t)) . -1117) (undo-tree-id2042 . -1) (#("i" 0 1 (fontified t)) . -1118) (undo-tree-id2043 . -1) (#("r" 0 1 (fontified t)) . -1119) (undo-tree-id2044 . -1) (#("s" 0 1 (fontified t)) . -1120) (undo-tree-id2045 . -1) (#("t" 0 1 (fontified t)) . -1121) (undo-tree-id2046 . -1) 1122) nil (25218 22154 739742 104000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1568) (1325 . 1569) 1236 (t 25218 22154 752589 853000)) nil (25218 22219 494081 113000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1811) (1568 . 1812) 1479) nil (25218 22219 494080 279000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t face font-lock-string-face)) . -1776) (undo-tree-id2059 . -1) (1776 . 1777) (1775 . 1776) (#("r" 0 1 (fontified t face font-lock-string-face)) . -1775) (undo-tree-id2060 . -1) (undo-tree-id2061 . -1) 1776 (1775 . 1776) (#("1" 0 1 (fontified t face font-lock-string-face)) . -1775) (undo-tree-id2062 . -1) (undo-tree-id2063 . -1) 1776 (1690 . 1691) (1688 . 1689) (1687 . 1689) (#("\"" 0 1 (fontified nil)) . -1687) (1671 . 1688) (1667 . 1671) (1645 . 1648) (#(" " 0 1 (fontified t)) . -1645) (undo-tree-id2064 . -1) (#("a" 0 1 (fontified t)) . -1646) (undo-tree-id2065 . -1) (#("n" 0 1 (fontified t)) . -1647) (undo-tree-id2066 . -1) (#("d" 0 1 (fontified t)) . -1648) (undo-tree-id2067 . -1) 1649 (1666 . 1667) (1665 . 1667) (#("\"" 0 1 (fontified nil)) . -1665) (1652 . 1666) (1645 . 1652) (#("i" 0 1 (fontified t face font-lock-type-face)) . -1645) (undo-tree-id2068 . -1) 1646 (1645 . 1646) (1220 . 1221) (#("1" 0 1 (fontified t face font-lock-string-face)) . -1220) (undo-tree-id2069 . -1) 1221 (1486 . 1487) (#("2" 0 1 (fontified t face font-lock-string-face)) . -1486) (undo-tree-id2070 . -1) 1487 (1486 . 1487) (#("1" 0 1 (fontified t face font-lock-string-face)) . -1486) (undo-tree-id2071 . -1) 1487 (1380 . 1382) (#("a" 0 1 (fontified t)) . -1380) (undo-tree-id2072 . -1) (#("&" 0 1 (fontified t)) . -1381) (undo-tree-id2073 . -1) 1382 (1381 . 1382) (#("n" 0 1 (fontified t)) . -1381) (undo-tree-id2074 . -1) (#("d" 0 1 (fontified t)) . -1382) (undo-tree-id2075 . -1) 1383 (1402 . 1403) (1400 . 1401) (1399 . 1401) (#("\"" 0 1 (fontified nil)) . -1399) (1395 . 1400) (1384 . 1395) (#("thirdS" 0 6 (fontified t face font-lock-type-face)) . -1384) (undo-tree-id2076 . -6) 1390 (1379 . 1390)) nil (25218 22219 494076 92000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -892) (undo-tree-id2115 . -1) (892 . 893) (#("
" 0 1 (fontified t)) . -755) (undo-tree-id2116 . -1) (undo-tree-id2117 . -1) (undo-tree-id2118 . -1) (#("	" 0 1 (fontified t)) . -756) (undo-tree-id2119 . -1) (#("	" 0 1 (fontified t)) . -757) (undo-tree-id2120 . -1) 758 (755 . 758) (t 25218 22219 512745 979000)) nil (25218 22374 443515 707000) 0 nil])
([nil nil ((nil rear-nonsticky nil 1694 . 1695) (#("
" 0 1 (fontified nil)) . -1718) (1692 . 1719) 1614) nil (25218 22374 443512 149000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -1697) (undo-tree-id2106 . -1) (1697 . 1698) (1695 . 1697) (1695 . 1700) (#("	" 0 1 (fontified t)) . -1695) (undo-tree-id2107 . -1) 1696 (1693 . 1696) (#("	" 0 1 (fontified t)) . -1693) (undo-tree-id2108 . -1) 1694 (#("	" 0 1 (fontified t)) . -1694) (undo-tree-id2109 . -1) (undo-tree-id2110 . -1) (#("}" 0 1 (fontified t)) . -1695) (undo-tree-id2111 . -1) (undo-tree-id2112 . 1) (undo-tree-id2113 . -1) 1696 (1693 . 1695) (#("		 " 0 1 (fontified nil) 1 2 (fontified nil rear-nonsticky t) 2 3 (fontified nil)) . -1693) (undo-tree-id2114 . -3) (1696 . 1697) (1695 . 1696)) nil (25218 22374 443510 911000) 0 nil])
([nil nil ((#("		} else if firstSymbol == \"*\" && secondSymbol == \"*\" && thirdSymbol == \"*\" && fourthSymbol == \"*\" {
" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t) 2 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 23 (fontified t) 23 27 (fontified t) 27 30 (fontified t face font-lock-string-face) 30 40 (fontified t) 40 41 (fontified t) 41 50 (fontified t) 50 52 (fontified t face font-lock-string-face) 52 53 (rear-nonsticky t fontified t face font-lock-string-face) 53 56 (fontified t) 56 57 (fontified t) 57 68 (fontified t) 68 72 (fontified t) 72 74 (fontified t face font-lock-string-face) 74 75 (fontified t face font-lock-string-face) 75 79 (fontified t) 79 95 (fontified t) 95 97 (fontified t face font-lock-string-face) 97 98 (fontified t face font-lock-string-face) 98 99 (fontified t) 99 100 (fontified t) 100 101 (fontified t)) . 1592) (undo-tree-id2102 . -101) (undo-tree-id2103 . -101) (undo-tree-id2104 . -101) (undo-tree-id2105 . -3) 1595) nil (25218 22374 443506 736000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -995) (894 . 996) 872) nil (25218 22374 443505 27000) 0 nil])
([nil nil ((#("		if firstSymbol == \"*\" {
" 0 2 (fontified t) 2 4 (fontified t face font-lock-keyword-face) 4 20 (fontified t) 20 23 (fontified t face font-lock-string-face) 23 25 (fontified t) 25 26 (fontified t)) . 869) (undo-tree-id2095 . -26) (undo-tree-id2096 . -26) (undo-tree-id2097 . -26) (undo-tree-id2098 . -2) (undo-tree-id2099 . -23) (undo-tree-id2100 . -23) (undo-tree-id2101 . -23) 871) nil (25218 22374 443504 351000) 0 nil])
([nil nil ((#("j" 0 1 (fontified t)) . -871) (undo-tree-id2077 . -1) (871 . 872) (#("}" 0 1 (fontified t)) . -871) (undo-tree-id2078 . -1) (undo-tree-id2079 . -1) (undo-tree-id2080 . -1) (undo-tree-id2081 . 1) (undo-tree-id2082 . -1) (#(" " 0 1 (fontified t)) . -872) (undo-tree-id2083 . -1) (undo-tree-id2084 . -1) (undo-tree-id2085 . -1) (#("e" 0 1 (fontified t)) . -873) (undo-tree-id2086 . -1) (undo-tree-id2087 . -1) (#("l" 0 1 (fontified t)) . -874) (undo-tree-id2088 . -1) (undo-tree-id2089 . -1) (#("s" 0 1 (fontified t)) . -875) (undo-tree-id2090 . -1) (undo-tree-id2091 . -1) (#("e" 0 1 (fontified t)) . -876) (undo-tree-id2092 . -1) (undo-tree-id2093 . -1) (#(" " 0 1 (fontified t)) . -877) (undo-tree-id2094 . -1) 878) nil (25218 22374 443498 886000) 0 nil])
([nil nil ((#("		} else if firstSymbol == \"*\" && secondSymbol == \"*\"{
" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t) 2 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 23 (fontified t) 23 27 (fontified t) 27 30 (fontified t face font-lock-string-face) 30 40 (fontified t) 40 41 (fontified t) 41 50 (fontified t) 50 52 (fontified t face font-lock-string-face) 52 53 (rear-nonsticky t fontified t face font-lock-string-face) 53 55 (fontified t)) . 1151) (undo-tree-id2129 . -55) (undo-tree-id2130 . -55) (undo-tree-id2131 . -29) (undo-tree-id2132 . -1) 1152 (t 25218 22374 469123 458000)) nil (25218 22383 689418 770000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1471) (1416 . 1472) 1340) nil (25218 22383 689416 379000) 0 nil])
([nil nil ((#("		} else if firstSymbol == \"*\" && secondSymbol == \"*\" && thirdSymbol == \"*\" {
" 0 1 (fontified t) 1 2 (rear-nonsticky t fontified t) 2 4 (fontified t) 4 7 (fontified t face font-lock-keyword-face) 7 8 (fontified t face font-lock-keyword-face) 8 9 (fontified t) 9 11 (fontified t face font-lock-keyword-face) 11 12 (fontified t) 12 23 (fontified t) 23 27 (fontified t) 27 30 (fontified t face font-lock-string-face) 30 40 (fontified t) 40 41 (fontified t) 41 50 (fontified t) 50 52 (fontified t face font-lock-string-face) 52 53 (rear-nonsticky t fontified t face font-lock-string-face) 53 56 (fontified t) 56 57 (fontified t) 57 68 (fontified t) 68 72 (fontified t) 72 74 (fontified t face font-lock-string-face) 74 75 (fontified t face font-lock-string-face) 75 76 (fontified t) 76 77 (fontified t) 77 78 (fontified t)) . 1339) (undo-tree-id2121 . -78) (undo-tree-id2122 . -57) (undo-tree-id2123 . -78) (undo-tree-id2124 . -78) (undo-tree-id2125 . -2) (undo-tree-id2126 . 76) (undo-tree-id2127 . -3) (undo-tree-id2128 . -2) 1341) nil (25218 22383 689415 654000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1136) (1058 . 1137) 1056) nil (25218 22383 689405 767000) 0 nil])
([nil nil ((#("			returnPosts[len(returnPosts)-1].Lines = append(returnPosts[len(returnPosts)-1].Lines, l)
" 0 2 (fontified t) 2 3 (rear-nonsticky t fontified t) 3 14 (fontified t) 14 15 (fontified t) 15 18 (fontified t face font-lock-builtin-face) 18 19 (fontified t) 19 30 (fontified t) 30 33 (fontified t) 33 40 (fontified t) 40 43 (fontified t) 43 49 (fontified t face font-lock-builtin-face) 49 50 (fontified t) 50 62 (fontified t) 62 65 (fontified t face font-lock-builtin-face) 65 91 (fontified t) 91 92 (fontified t)) . 1137) (undo-tree-id2133 . -31) (undo-tree-id2134 . -49) (undo-tree-id2135 . -49) (undo-tree-id2136 . -89) (undo-tree-id2137 . -92) (undo-tree-id2138 . -92) (undo-tree-id2139 . -89) (undo-tree-id2140 . -92) (undo-tree-id2141 . -31) (undo-tree-id2142 . -31) (undo-tree-id2143 . -89) (undo-tree-id2144 . -90) 1168 (t 25218 22383 705146 105000)) nil (25218 22413 258928 28000) 0 nil])
([nil nil ((#("
" 0 1 (fontified nil)) . -1150) (1058 . 1151) 1057) nil (25218 22413 258915 86000) 0 nil])
([nil nil ((1045 . 1046) (#("1" 0 1 (fontified t face font-lock-string-face)) . 1045) (t 25218 22413 273218 713000)) nil (25218 22441 913725 275000) 0 nil])
([nil nil ((1311 . 1312) (#("2" 0 1 (fontified t face font-lock-string-face)) . 1311)) nil (25218 22441 913724 816000) 0 nil])
([nil nil ((1554 . 1555) (#("3" 0 1 (fontified t face font-lock-string-face)) . 1554)) nil (25218 22441 913724 368000) 0 nil])
([nil current ((1775 . 1776) (#("4" 0 1 (fontified t face font-lock-string-face)) . 1775)) nil (25218 22441 913720 920000) 0 nil])
nil
